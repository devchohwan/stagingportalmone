<style>
  /* 회원 관리 탭 스타일 */
  #users-tab .tab-btn {
    padding: 10px 16px;
    border-radius: 6px;
    font-weight: 600;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    background: transparent;
    color: #4a5568;
  }
  
  #users-tab .tab-btn:hover {
    background: #edf2f7;
    color: #2d3748;
  }
  
  #users-tab .tab-btn.active {
    background: #ffffff !important;
    color: #667eea !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
  }
  
  #users-tab .search-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }
  
  #users-tab .search-button:hover {
    background: #5a67d8;
    border-color: #5a67d8;
  }
  
  #users-tab .clear-button:hover {
    background: #edf2f7;
    color: #2d3748;
  }
  
  .admin-container {
    min-height: 100vh;
    background: #ffffff;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    padding: 40px 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .admin-header {
    text-align: center;
    margin-bottom: 40px;
  }
  
  .admin-title {
    font-size: 1.8rem;
    font-weight: bold;
    color: #2d3748;
    margin-bottom: 10px;
    line-height: 1.3;
  }
  
  .admin-subtitle {
    font-size: 1.1rem;
    color: #718096;
    margin-bottom: 0;
  }
  
  .content-wrapper {
    width: 100%;
    max-width: 1200px;
  }
  
  .admin-nav {
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    border: 1px solid #e2e8f0;
    padding: 20px;
    margin-bottom: 30px;
  }
  
  .nav-tabs {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  
  .nav-tab {
    background: #f7fafc;
    color: #4a5568;
    padding: 12px 20px;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s ease;
    border: 2px solid transparent;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .nav-tab:hover {
    background: #edf2f7;
    color: #2d3748;
    transform: translateY(-1px);
  }
  
  .nav-tab.active {
    background: linear-gradient(135deg, #fa709a, #fee140);
    color: white;
    border-color: #fa709a;
  }
  
  .nav-tab.active::after {
    content: '👑';
    margin-left: 5px;
  }
  
  .dashboard-section {
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    border: 1px solid #e2e8f0;
    padding: 30px;
    margin-bottom: 30px;
  }
  
  .section-title {
    font-size: 1.5rem;
    font-weight: bold;
    color: #2d3748;
    margin-bottom: 20px;
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }
  
  .stat-card {
    background: #ffffff;
    border-radius: 12px;
    padding: 25px;
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }
  
  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }
  
  .stat-card.clickable {
    cursor: pointer;
  }
  
  .stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    margin-bottom: 15px;
    color: white;
  }
  
  .stat-users { background: linear-gradient(135deg, #667eea, #764ba2); }
  .stat-practice { background: linear-gradient(135deg, #f093fb, #f5576c); }
  .stat-makeup { background: linear-gradient(135deg, #4facfe, #00f2fe); }
  .stat-admin { background: linear-gradient(135deg, #fa709a, #fee140); }
  
  .stat-label {
    font-size: 0.9rem;
    color: #718096;
    margin-bottom: 5px;
  }
  
  .stat-value {
    font-size: 2rem;
    font-weight: bold;
    color: #2d3748;
  }
  
  .summary-card {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
    border: 2px solid rgba(102, 126, 234, 0.2);
    border-radius: 12px;
    padding: 20px;
    margin-top: 20px;
  }
  
  .summary-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    text-align: center;
  }
  
  .summary-item {
    padding: 10px;
  }
  
  .summary-label {
    font-size: 0.9rem;
    color: #4a5568;
    margin-bottom: 5px;
  }
  
  .summary-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: #2d3748;
  }
  
  .back-link {
    color: #718096;
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.3s ease;
    text-align: center;
    display: block;
    margin-top: 30px;
    padding: 12px 20px;
    background: #f7fafc;
    border-radius: 8px;
    border: 1px solid #e2e8f0;
  }
  
  .back-link:hover {
    color: #2d3748;
    background: #edf2f7;
    text-decoration: none;
  }
  
  .tab-content {
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    border: 1px solid #e2e8f0;
    padding: 30px;
    min-height: 400px;
  }
  
  .hidden {
    display: none !important;
  }
  
  /* 320px 모바일 최적화 */
  @media (max-width: 320px) {
    .admin-container {
      padding: 16px 12px;
      min-height: 100vh;
    }
    
    .admin-header {
      margin-bottom: 24px;
    }
    
    .admin-title {
      font-size: 1.25rem;
      font-weight: bold;
      margin-bottom: 6px;
    }
    
    .admin-subtitle {
      font-size: 0.85rem;
      color: #718096;
    }
    
    .admin-nav {
      padding: 12px;
      margin-bottom: 20px;
      border-radius: 10px;
    }
    
    .nav-tabs {
      flex-direction: column;
      gap: 8px;
    }
    
    .nav-tab {
      font-size: 0.9rem;
      padding: 10px 14px;
      border-radius: 6px;
      width: 100%;
      justify-content: center;
    }
    
    .dashboard-section {
      padding: 16px;
      margin-bottom: 20px;
      border-radius: 10px;
    }
    
    .section-title {
      font-size: 1.1rem;
      margin-bottom: 16px;
      gap: 6px;
    }
    
    .stats-grid {
      grid-template-columns: 1fr;
      gap: 12px;
      margin-bottom: 20px;
    }
    
    .stat-card {
      padding: 16px;
      border-radius: 10px;
    }
    
    .stat-icon {
      width: 40px;
      height: 40px;
      font-size: 20px;
      margin-bottom: 12px;
      border-radius: 8px;
    }
    
    .stat-label {
      font-size: 0.8rem;
      margin-bottom: 4px;
    }
    
    .stat-value {
      font-size: 1.4rem;
    }
    
    .summary-card {
      padding: 16px;
      margin-top: 16px;
      border-radius: 10px;
    }
    
    .summary-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 12px;
    }
    
    .summary-item {
      padding: 8px;
    }
    
    .summary-label {
      font-size: 0.75rem;
      margin-bottom: 4px;
    }
    
    .summary-value {
      font-size: 1.1rem;
    }
    
    .tab-content {
      padding: 16px;
      min-height: 300px;
      border-radius: 10px;
    }
    
    .back-link {
      font-size: 0.85rem;
      padding: 10px 16px;
      margin-top: 20px;
      border-radius: 6px;
    }
  }
  
  @media (max-width: 480px) {
    .admin-title {
      font-size: 1.4rem;
      white-space: nowrap;
    }
    
    .admin-subtitle {
      font-size: 0.9rem;
    }
    
    .admin-container {
      padding: 20px 15px;
    }
    
    .content-wrapper {
      max-width: 100%;
    }
    
    .nav-tabs {
      flex-direction: column;
    }
    
    .nav-tab {
      font-size: 14px;
      padding: 10px 16px;
    }
    
    .stats-grid {
      grid-template-columns: 1fr;
      gap: 15px;
    }
    
    .stat-card {
      padding: 20px;
    }
    
    .stat-icon {
      width: 40px;
      height: 40px;
      font-size: 20px;
    }
    
    .stat-value {
      font-size: 1.5rem;
    }
    
    .section-title {
      font-size: 1.2rem;
    }
    
    .dashboard-section {
      padding: 20px;
    }
    
    .summary-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 15px;
    }
    
    .summary-value {
      font-size: 1.2rem;
    }
    
    .tab-content {
      padding: 20px;
    }
  }
</style>

<div class="admin-container">
  <div class="admin-header">
    <h1 class="admin-title">관리자 대시보드</h1>
    <p class="admin-subtitle">모네뮤직 통합 관리 시스템</p>
  </div>

  <div class="content-wrapper">
    <!-- 네비게이션 탭 -->
    <div class="admin-nav">
      <div class="nav-tabs">
        <a href="javascript:void(0)" class="nav-tab active" data-tab="dashboard">
          📊 한눈에 보기
        </a>
        <a href="javascript:void(0)" class="nav-tab" data-tab="users">
          👥 회원 관리
        </a>
        <a href="javascript:void(0)" class="nav-tab" data-tab="reservations">
          📅 예약 관리
        </a>
      </div>
    </div>

    <!-- 대시보드 탭 -->
    <div id="dashboard-tab" class="tab-content">
      <div class="dashboard-section">
        <h2 class="section-title">
          👥 회원 현황
        </h2>
        <div class="stats-grid">
          <div class="stat-card clickable" onclick="switchToTab('users', 'waiting')">
            <div class="stat-icon stat-users">⏳</div>
            <div class="stat-label">승인 대기</div>
            <div class="stat-value"><%= @total_pending_users || 0 %></div>
          </div>
          <div class="stat-card clickable" onclick="switchToTab('users', 'approved')">
            <div class="stat-icon stat-users">✅</div>
            <div class="stat-label">전체 사용자</div>
            <div class="stat-value"><%= @total_users || 0 %></div>
          </div>
        </div>
      </div>

      <div class="dashboard-section">
        <h2 class="section-title">
          🎹 연습실 예약 현황
        </h2>
        <div class="stats-grid">
          <div class="stat-card clickable" onclick="switchToTab('reservations', 'practice')">
            <div class="stat-icon stat-practice">📅</div>
            <div class="stat-label">오늘 연습실 예약</div>
            <div class="stat-value"><%= @practice_todays_reservations || 0 %></div>
          </div>
          <div class="stat-card clickable" onclick="switchToTab('reservations', 'practice')">
            <div class="stat-icon stat-practice">🎵</div>
            <div class="stat-label">진행중인 연습실 예약</div>
            <div class="stat-value"><%= @practice_active_reservations || 0 %></div>
          </div>
        </div>
      </div>

      <div class="dashboard-section">
        <h2 class="section-title">
          📚 보충수업 예약 현황
        </h2>
        <div class="stats-grid">
          <div class="stat-card clickable" onclick="switchToTab('reservations', 'makeup')">
            <div class="stat-icon stat-makeup">📝</div>
            <div class="stat-label">오늘 보충수업 예약</div>
            <div class="stat-value"><%= @makeup_todays_reservations || 0 %></div>
          </div>
          <div class="stat-card clickable" onclick="switchToTab('reservations', 'makeup')">
            <div class="stat-icon stat-makeup">✏️</div>
            <div class="stat-label">진행중인 보충수업 예약</div>
            <div class="stat-value"><%= @makeup_active_reservations || 0 %></div>
          </div>
        </div>
      </div>

      <!-- 전체 통계 요약 -->
      <div class="summary-card">
        <div class="summary-grid">
          <div class="summary-item">
            <div class="summary-label">전체 회원</div>
            <div class="summary-value"><%= User.count %>명</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">전체 예약</div>
            <div class="summary-value"><%= Reservation.count %>건</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">활성 예약</div>
            <div class="summary-value"><%= Reservation.where(status: 'active').count %>건</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">페널티 부과</div>
            <div class="summary-value"><%= Penalty.where('no_show_count > 0 OR cancel_count > 0').count %>명</div>
          </div>
        </div>
      </div>
    </div>

    <!-- 회원 관리 탭 -->
    <div id="users-tab" class="tab-content hidden">
      <div class="users-header" style="background: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05); border: 1px solid #e2e8f0; padding: 25px; margin-bottom: 20px;">
        <h2 class="users-title" style="font-size: 1.5rem; font-weight: bold; color: #2d3748; margin-bottom: 20px;">👥 회원 관리</h2>
        
        <!-- 탭 네비게이션 -->
        <div class="tab-nav" style="display: flex; gap: 5px; margin-bottom: 20px; background: #f7fafc; padding: 5px; border-radius: 10px;">
          <button onclick="changeTab('approved')" data-tab="approved" class="tab-btn active">
            승인된 회원
          </button>
          <button onclick="changeTab('waiting')" data-tab="waiting" class="tab-btn">
            승인 대기
          </button>
          <button onclick="changeTab('hold')" data-tab="hold" class="tab-btn">
            보류
          </button>
          <button onclick="changeTab('penalty')" data-tab="penalty" class="tab-btn">
            페널티
          </button>
        </div>
        
        <!-- 검색 및 필터 -->
        <div class="search-filters" style="display: flex; gap: 12px; flex-wrap: wrap;">
          <input type="text" 
                 id="user-search" 
                 placeholder="이름이나 아이디로 검색..." 
                 class="search-input"
                 style="flex: 1; min-width: 250px; padding: 12px 16px; border: 1px solid #e2e8f0; border-radius: 8px; font-size: 0.9rem; transition: all 0.3s ease;"
                 onkeypress="if(event.key==='Enter') searchUsers()">
          <button onclick="searchUsers()" class="search-button" style="padding: 12px 20px; border: 1px solid #667eea; border-radius: 8px; font-size: 0.9rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; background: #667eea; color: white;">검색</button>
          <button onclick="clearSearch()" class="clear-button" style="padding: 12px 20px; border: 1px solid #e2e8f0; border-radius: 8px; font-size: 0.9rem; font-weight: 600; cursor: pointer; transition: all 0.3s ease; background: #f7fafc; color: #4a5568;">전체보기</button>
        </div>
      </div>
      
      <div id="users-content-area">
        <div class="text-center py-8">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-500"></div>
          <p class="text-gray-500 mt-2">회원 목록을 불러오는 중...</p>
        </div>
      </div>
    </div>

    <!-- 예약 관리 탭 -->
    <div id="reservations-tab" class="tab-content hidden">
      <div id="reservations-content-area">
        <div class="text-center py-8">
          <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-500"></div>
          <p class="text-gray-500 mt-2">예약 목록을 불러오는 중...</p>
        </div>
      </div>
    </div>

    <a href="/services" class="back-link">
      ← 서비스 메인으로 돌아가기
    </a>
  </div>
</div>

<script>
  // 전역 함수들 초기화
  if (typeof window.adminFunctionsInitialized === 'undefined') {
    window.adminFunctionsInitialized = true;
    
    // 필터 상태 저장 및 복원 기능
    window.saveFilters = function(type) {
      if (type === 'users') {
        const searchInput = document.getElementById('user-search');
        if (searchInput) {
          sessionStorage.setItem('admin_users_search', searchInput.value);
          sessionStorage.setItem('admin_users_tab', window.currentUsersTab || 'approved');
        }
      } else if (type === 'reservations') {
        const searchInput = document.getElementById('reservation-search');
        const statusFilter = document.getElementById('reservation-status');
        const dateFilter = document.getElementById('reservation-date');
        
        if (searchInput) sessionStorage.setItem('admin_reservations_search', searchInput.value);
        if (statusFilter) sessionStorage.setItem('admin_reservations_status', statusFilter.value);
        if (dateFilter) sessionStorage.setItem('admin_reservations_date', dateFilter.value);
        sessionStorage.setItem('admin_reservations_service', window.currentReservationService || 'practice');
      }
    };
    
    window.restoreFilters = function(type) {
      if (type === 'users') {
        const savedSearch = sessionStorage.getItem('admin_users_search');
        const searchInput = document.getElementById('user-search');
        if (searchInput && savedSearch) {
          searchInput.value = savedSearch;
          window.searchUsers();
        }
      } else if (type === 'reservations') {
        const savedSearch = sessionStorage.getItem('admin_reservations_search');
        const savedStatus = sessionStorage.getItem('admin_reservations_status');
        const savedDate = sessionStorage.getItem('admin_reservations_date');
        
        const searchInput = document.getElementById('reservation-search');
        const statusFilter = document.getElementById('reservation-status');
        const dateFilter = document.getElementById('reservation-date');
        
        if (searchInput && savedSearch) searchInput.value = savedSearch;
        if (statusFilter && savedStatus) statusFilter.value = savedStatus;
        if (dateFilter && savedDate) dateFilter.value = savedDate;
        
        if (savedSearch || savedStatus || savedDate) {
          window.filterReservations();
        }
      }
    };
    
    // 탭 전환 함수
    window.switchToTab = function(tab, subtab) {
      // 네비게이션 탭 업데이트
      document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
      document.querySelector(`[data-tab="${tab}"]`).classList.add('active');
      
      // 콘텐츠 탭 업데이트
      document.querySelectorAll('.tab-content').forEach(t => t.classList.add('hidden'));
      document.getElementById(`${tab}-tab`).classList.remove('hidden');
      
      // 해당 탭의 콘텐츠 로드
      if (tab === 'users') {
        loadUsersTab(subtab || 'approved');
      } else if (tab === 'reservations') {
        loadReservationsTab(subtab || 'practice');
      }
    };
    
    // 회원 관리 탭 로드
    window.loadUsersTab = function(tab, page = 1) {
      if (!tab) tab = sessionStorage.getItem('admin_users_tab') || window.currentUsersTab || 'approved';
      const contentArea = document.getElementById('users-content-area');
      if (!contentArea) return;
      
      window.currentUsersTab = tab;
      
      // 검색어 가져오기
      const searchInput = document.getElementById('user-search');
      const searchQuery = searchInput ? searchInput.value : '';
      
      // 탭 버튼 업데이트 (users-tab 내부의 버튼들)
      document.querySelectorAll('#users-tab .tab-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      
      const activeBtn = document.querySelector(`#users-tab .tab-btn[data-tab="${tab}"]`);
      if (activeBtn) {
        activeBtn.classList.add('active');
      }
      
      contentArea.innerHTML = '<div class="text-center py-8"><div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-500"></div><p class="text-gray-500 mt-2">회원 목록을 불러오는 중...</p></div>';
      
      fetch(`/admin/users/content?tab=${tab}&page=${page}&search=${encodeURIComponent(searchQuery)}`)
        .then(response => response.text())
        .then(html => {
          contentArea.innerHTML = html;
        })
        .catch(error => {
          console.error('Error loading users:', error);
          contentArea.innerHTML = '<div class="text-center py-8 text-red-600">회원 목록을 불러오는데 실패했습니다.</div>';
        });
    };
    
    
    // 예약 관리 탭 로드
    window.loadReservationsTab = function(service) {
      if (!service) service = sessionStorage.getItem('admin_reservations_service') || window.currentReservationService || 'practice';
      const contentArea = document.getElementById('reservations-content-area');
      if (!contentArea) return;
      
      window.currentReservationService = service;
      
      contentArea.innerHTML = '<div class="text-center py-8"><div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-gray-500"></div><p class="text-gray-500 mt-2">예약 목록을 불러오는 중...</p></div>';
      
      fetch(`/admin/reservations/content?service=${service}`)
        .then(response => response.text())
        .then(html => {
          contentArea.innerHTML = html;
          // 필터 복원
          setTimeout(() => window.restoreFilters('reservations'), 100);
          
          // 예약 관리 관련 함수들을 전역에 등록
          window.searchReservations = function() {
            const searchInput = document.getElementById('reservation-search');
            if (!searchInput) return;
            
            const searchTerm = searchInput.value.toLowerCase();
            const rows = document.querySelectorAll('.reservation-row');
            
            rows.forEach(row => {
              const name = (row.getAttribute('data-name') || '').toLowerCase();
              const username = (row.getAttribute('data-username') || '').toLowerCase();
              
              if (searchTerm === '' || name.includes(searchTerm) || username.includes(searchTerm)) {
                row.style.display = '';
              } else {
                row.style.display = 'none';
              }
            });
          };
        
          window.filterReservations = function() {
            const statusFilter = document.getElementById('reservation-status')?.value || '';
            const dateFilter = document.getElementById('reservation-date')?.value || '';
            const searchTerm = (document.getElementById('reservation-search')?.value || '').toLowerCase();
            const rows = document.querySelectorAll('.reservation-row');
            
            rows.forEach(row => {
              let visible = true;
              
              // 검색어 필터
              if (searchTerm) {
                const name = (row.getAttribute('data-name') || '').toLowerCase();
                const username = (row.getAttribute('data-username') || '').toLowerCase();
                if (!name.includes(searchTerm) && !username.includes(searchTerm)) {
                  visible = false;
                }
              }
              
              // 상태 필터
              if (statusFilter && visible) {
                const status = row.getAttribute('data-status');
                if (status !== statusFilter) {
                  visible = false;
                }
              }
              
              // 날짜 필터
              if (dateFilter && visible) {
                const date = row.getAttribute('data-date');
                if (date !== dateFilter) {
                  visible = false;
                }
              }
              
              row.style.display = visible ? '' : 'none';
            });
          };
        
          window.resetReservationFilters = function() {
            const searchInput = document.getElementById('reservation-search');
            const statusSelect = document.getElementById('reservation-status');
            const dateInput = document.getElementById('reservation-date');
            
            if (searchInput) searchInput.value = '';
            if (statusSelect) statusSelect.value = '';
            if (dateInput) dateInput.value = '';
            
            const rows = document.querySelectorAll('.reservation-row');
            rows.forEach(row => {
              row.style.display = '';
            });
          };
        
          window.updateReservationStatus = function(reservationId, status, service) {
            fetch(`/admin/reservations/${reservationId}/update_status`, {
              method: 'PATCH',
              headers: {
                'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({ status: status, service: service })
            }).then(response => {
              if (response.ok) {
                window.loadReservationsTab(service);
              } else {
                alert('상태 변경에 실패했습니다.');
              }
            }).catch(error => {
              console.error('Error:', error);
              alert('상태 변경에 실패했습니다.');
            });
          };
        
          window.deleteReservation = function(reservationId, service) {
            if (confirm('정말로 이 예약을 삭제하시겠습니까?')) {
              fetch(`/admin/reservations/${reservationId}`, {
                method: 'DELETE',
                headers: {
                  'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                },
                body: JSON.stringify({ service: service })
              }).then(response => {
                if (response.ok) {
                  window.loadReservationsTab(service);
                } else {
                  alert('삭제에 실패했습니다.');
                }
              }).catch(error => {
                console.error('Error:', error);
                alert('삭제에 실패했습니다.');
              });
            }
          };
          
          console.log('예약 관리 함수들이 등록되었습니다.');
        })
        .catch(error => {
          console.error('Error loading reservations:', error);
          contentArea.innerHTML = '<div class="text-center py-8 text-red-600">예약 목록을 불러오는데 실패했습니다.</div>';
        });
    };
    
    // 기타 관리 함수들
    window.changeTab = function(tab) {
      loadUsersTab(tab);
    };
    
    window.getCurrentTab = function() {
      const activeTabBtn = document.querySelector('#users-tab .tab-btn.active');
      if (activeTabBtn) {
        return activeTabBtn.dataset.tab;
      }
      return window.currentUsersTab || 'approved';
    };
    
    // 검색 함수
    window.searchUsers = function() {
      const currentTab = window.getCurrentTab();
      window.loadUsersTab(currentTab, 1); // 검색 시 페이지는 1로 리셋
    };
    
    window.clearSearch = function() {
      const searchInput = document.getElementById('user-search');
      if (searchInput) {
        searchInput.value = '';
      }
      const currentTab = window.getCurrentTab();
      window.loadUsersTab(currentTab, 1);
    };

    // 사용자 관리 함수들
    window.holdUser = function(userId, system) {
      if(confirm('이 사용자를 보류하시겠습니까?')) {
        window.saveFilters('users'); // 필터 상태 저장
        const url = system === 'makeup' ? `/admin/makeup/users/${userId}/hold` : `/admin/practice/users/${userId}/hold`;
        fetch(url, {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json'
          }
        }).then(() => {
          window.loadUsersTab(); // 탭 재로드 (필터 자동 복원)
        });
      }
    };

    window.approveUser = function(userId, system) {
      if(confirm('이 사용자를 승인하시겠습니까?')) {
        window.saveFilters('users');
        const url = system === 'makeup' ? `/admin/makeup/users/${userId}/approve` : `/admin/practice/users/${userId}/approve`;
        fetch(url, {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json'
          }
        }).then(() => {
          window.loadUsersTab();
        });
      }
    };

    window.rejectUser = function(userId, system) {
      if(confirm('이 사용자를 거부/삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.')) {
        window.saveFilters('users');
        const url = system === 'makeup' ? `/admin/makeup/users/${userId}/reject` : `/admin/practice/users/${userId}/reject`;
        fetch(url, {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json'
          }
        }).then(() => {
          window.loadUsersTab();
        });
      }
    };

    window.deleteUser = function(userId, system) {
      if(confirm('정말 삭제하시겠습니까?')) {
        window.saveFilters('users');
        const url = system === 'makeup' ? `/admin/makeup/users/${userId}/reject` : `/admin/practice/users/${userId}/reject`;
        fetch(url, {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json'
          }
        }).then(() => {
          window.loadUsersTab();
        });
      }
    };

    window.updateTeacher = function(userId, teacher, system) {
      const url = system === 'makeup' ? `/admin/makeup/users/${userId}/update_teacher` : `/admin/practice/users/${userId}/update_teacher`;
      fetch(url, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ teacher: teacher })
      });
    };

    window.resetPassword = function(userId, username, system) {
      const newPassword = prompt(`${username}의 새 비밀번호를 입력하세요 (최소 6자):`);
      if (newPassword && newPassword.length >= 6) {
        window.saveFilters('users');
        const url = system === 'makeup' ? `/admin/makeup/users/${userId}/reset_password` : `/admin/practice/users/${userId}/reset_password`;
        fetch(url, {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ password: newPassword })
        }).then(() => {
          alert('비밀번호가 재설정되었습니다.');
          // 비밀번호 재설정은 페이지 새로고침이 필요없음
        });
      } else if (newPassword) {
        alert('비밀번호는 최소 6자 이상이어야 합니다.');
      }
    };

    window.resetPenalty = function(userId, system, event) {
      if(confirm('이 사용자의 페널티를 초기화하시겠습니까?')) {
        const url = system === 'makeup' ? `/admin/makeup/users/${userId}/reset_penalty` : `/admin/practice/users/${userId}/reset_penalty`;
        
        const button = event.currentTarget;
        button.disabled = true;
        button.textContent = '처리중...';
        
        fetch(url, {
          method: 'PATCH',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json'
          }
        }).then(response => {
          if (response.ok) {
            const row = button.closest('tr');
            if (row) {
              button.textContent = '초기화됨';
              button.className = 'text-green-600 font-medium cursor-default';
              row.style.transition = 'opacity 0.5s ease-out';
              row.style.opacity = '0.5';
              
              setTimeout(() => {
                row.remove();
                const tbody = document.querySelector('.user-table-body');
                if (tbody && tbody.children.length === 0) {
                  const emptyMessage = document.createElement('tr');
                  emptyMessage.innerHTML = '<td colspan="9" class="text-center py-4 text-gray-500">페널티가 있는 회원이 없습니다.</td>';
                  tbody.appendChild(emptyMessage);
                }
              }, 500);
            }
          } else {
            alert('페널티 초기화에 실패했습니다.');
            button.disabled = false;
            button.textContent = '초기화';
          }
        });
      }
    };

    // 예약 관리 함수들
    window.updateReservationStatus = function(reservationId, status, service) {
      window.saveFilters('reservations'); // 필터 상태 저장
      fetch(`/admin/reservations/${reservationId}/update_status`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({ status: status, service: service })
      }).then(response => {
        if (response.ok) {
          window.loadReservationsTab(service); // 필터 자동 복원
        } else {
          alert('상태 변경에 실패했습니다.');
        }
      }).catch(error => {
        console.error('Error:', error);
        alert('상태 변경에 실패했습니다.');
      });
    };

    window.deleteReservation = function(reservationId, service) {
      if (confirm('정말로 이 예약을 삭제하시겠습니까?')) {
        window.saveFilters('reservations');
        fetch(`/admin/reservations/${reservationId}`, {
          method: 'DELETE',
          headers: {
            'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ service: service })
        }).then(response => {
          if (response.ok) {
            window.loadReservationsTab(service);
          } else {
            alert('삭제에 실패했습니다.');
          }
        }).catch(error => {
          console.error('Error:', error);
          alert('삭제에 실패했습니다.');
        });
      }
    };

    // 페이지 변경 함수
    window.changePage = function(page) {
      const currentTab = window.getCurrentTab();
      window.loadUsersTab(currentTab, page);
    };
  }
  
  // 탭 전환 이벤트 리스너
  document.addEventListener('click', function(e) {
    const tabLink = e.target.closest('.nav-tab');
    if (!tabLink) return;
    
    e.preventDefault();
    
    const tabName = tabLink.getAttribute('data-tab');
    
    // 네비게이션 탭 업데이트
    document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
    tabLink.classList.add('active');
    
    // 콘텐츠 탭 업데이트
    document.querySelectorAll('.tab-content').forEach(t => t.classList.add('hidden'));
    document.getElementById(`${tabName}-tab`).classList.remove('hidden');
    
    // 해당 탭의 콘텐츠 로드
    if (tabName === 'users') {
      loadUsersTab();
    } else if (tabName === 'reservations') {
      loadReservationsTab();
    }
  });
  
  // 보충수업 내용 모달 함수들을 전역으로 정의 (AJAX 로드 전에도 사용 가능하도록)
  window.showLessonContent = function(reservationId) {
    fetch('/admin/reservations/' + reservationId + '/lesson_content')
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          document.getElementById('modal-user-name').textContent = data.user_name;
          document.getElementById('modal-date').textContent = data.date;
          document.getElementById('modal-time').textContent = data.time;
          document.getElementById('modal-lesson-content').textContent = data.lesson_content || '내용이 없습니다.';
          document.getElementById('lesson-content-modal').classList.add('show');
        } else {
          alert('예약 정보를 불러올 수 없습니다.');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('오류가 발생했습니다.');
      });
  }

  window.closeLessonModal = function() {
    var modal = document.getElementById('lesson-content-modal');
    if (modal) {
      modal.classList.remove('show');
    }
  }
</script>