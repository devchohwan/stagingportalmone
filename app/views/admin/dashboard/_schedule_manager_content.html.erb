<style>
  /* 전체 컨테이너 - 고유 클래스로 CSS 격리 */
  .schedule-manager-wrapper {
    min-height: 100vh;
    background: #f9fafb;
    padding: 1.5rem;
  }

  .schedule-manager-wrapper .header-card {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
  }

  .schedule-manager-wrapper .header-title {
    font-size: 1.75rem;
    font-weight: 700;
    color: #667eea;
  }

  .schedule-manager-wrapper .tabs-card {
    background: white;
    border-radius: 10px;
    padding: 1rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
  }

  .schedule-manager-wrapper .teacher-tab {
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 600;
    transition: all 0.2s;
    border: none;
    cursor: pointer;
  }

  .schedule-manager-wrapper .teacher-tab.active {
    background: #667eea;
    color: white;
  }

  .schedule-manager-wrapper .teacher-tab:not(.active) {
    background: #e5e7eb;
    color: #374151;
  }

  .schedule-manager-wrapper .teacher-tab:not(.active):hover {
    background: #d1d5db;
  }

  .schedule-manager-wrapper .nav-card {
    background: white;
    border-radius: 10px;
    padding: 1rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 1.5rem;
  }

  .schedule-manager-wrapper .nav-btn {
    background: #667eea;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }

  .schedule-manager-wrapper .nav-btn:hover {
    background: #5568d3;
  }

  .schedule-manager-wrapper .table-container {
    background: white;
    border-radius: 10px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    overflow: hidden;
  }

  .schedule-manager-wrapper table {
    width: auto;
    border-collapse: collapse;
    table-layout: fixed;
  }

  .schedule-manager-wrapper th {
    background: #667eea;
    color: white;
    font-weight: 700;
    padding: 0.75rem;
    border: 1px solid white;
    text-align: center;
    width: 140px;
  }

  .schedule-manager-wrapper th:first-child {
    width: 80px;
  }

  .schedule-manager-wrapper td {
    border: 1px solid #e5e7eb;
    width: 140px;
    vertical-align: top;
    background: white;
    padding: 0;
  }

  .schedule-manager-wrapper .time-cell {
    background: #f9fafb;
    font-weight: 700;
    text-align: center;
    padding: 0.75rem;
    position: sticky;
    left: 0;
    z-index: 10;
    width: 80px;
  }

  .schedule-manager-wrapper .schedule-cell {
    min-height: 70px;
    display: flex;
    flex-direction: column;
  }

  .schedule-manager-wrapper .cell-header {
    display: none;
  }

  .schedule-manager-wrapper .add-btn {
    display: none;
  }

  .schedule-manager-wrapper .students-area {
    flex: 1;
    padding: 0.3rem;
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
  }

  .schedule-manager-wrapper .students-area.empty {
    justify-content: center;
    align-items: center;
    color: #9ca3af;
    font-size: 0.75rem;
    cursor: pointer;
  }

  .schedule-manager-wrapper .students-area.empty:hover {
    background: rgba(102, 126, 234, 0.03);
    color: #667eea;
  }

  .schedule-manager-wrapper .schedule-cell.holiday {
    background: repeating-linear-gradient(
      45deg,
      #f9fafb,
      #f9fafb 10px,
      #f3f4f6 10px,
      #f3f4f6 20px
    );
    opacity: 0.6;
  }

  .schedule-manager-wrapper .schedule-cell.holiday .add-btn,
  .schedule-manager-wrapper .schedule-cell.holiday .students-area {
    pointer-events: none;
    opacity: 0.5;
  }

  .schedule-manager-wrapper .schedule-cell.holiday .students-area.empty::before {
    content: '🚫 휴무일';
    display: block;
    text-align: center;
    color: #9ca3af;
    font-size: 0.75rem;
  }

  .schedule-manager-wrapper .schedule-cell.holiday .students-area.empty {
    cursor: not-allowed;
  }

  .schedule-manager-wrapper .student-card {
    background: white;
    border: 2px solid #e5e7eb;
    border-radius: 4px;
    padding: 0.25rem 0.4rem;
    transition: all 0.2s;
    cursor: move;
    font-size: 0.8rem;
  }

  .schedule-manager-wrapper .student-card:hover {
    border-color: #667eea;
    box-shadow: 0 2px 4px rgba(102, 126, 234, 0.2);
  }

  .schedule-manager-wrapper .student-card.dragging {
    opacity: 0.5;
    cursor: grabbing;
  }

  /* 스케줄 해제 영역 */
  .unschedule-zone {
    border: 3px dashed #d1d5db;
    border-radius: 12px;
    padding: 15px 20px;
    background: #f9fafb;
    transition: all 0.3s;
    min-height: 50px;
  }

  .unschedule-zone.drag-over {
    border-color: #3b82f6;
    background: #dbeafe;
  }

  .unschedule-header {
    text-align: center;
    padding-bottom: 10px;
    border-bottom: 2px solid #e5e7eb;
    margin-bottom: 10px;
  }

  .unschedule-icon {
    font-size: 2rem;
    margin-bottom: 8px;
  }

  .unschedule-text {
    font-size: 0.95rem;
    font-weight: 600;
    color: #374151;
    margin-bottom: 5px;
  }

  .unschedule-subtext {
    font-size: 0.8rem;
    color: #9ca3af;
  }

  .unscheduled-students-area {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    min-height: 50px;
    padding: 5px;
  }

  /* 세로 레이아웃일 때 */
  .unscheduled-students-area[style*="flex-direction: column"] {
    gap: 6px;
  }

  .unscheduled-students-area[style*="flex-direction: column"] .student-card {
    width: 100%;
  }

  .unscheduled-students-area:empty::after {
    content: '미배치 회원이 없습니다';
    width: 100%;
    text-align: center;
    color: #9ca3af;
    font-size: 0.9rem;
    padding: 20px;
  }

  .students-area.drag-over {
    background: #dbeafe !important;
    border: 2px dashed #3b82f6 !important;
  }

  /* 모달 - 완전 격리 */
  .schedule-modal-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 99999 !important;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(2px);
  }

  .schedule-modal-overlay.show {
    display: flex !important;
  }

  .schedule-modal-content {
    background: white;
    border-radius: 12px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow: hidden;
  }

  .schedule-modal-header {
    background: #667eea;
    color: white;
    padding: 1.25rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .schedule-modal-header h3 {
    font-size: 1.125rem;
    font-weight: 700;
    margin: 0;
  }

  .schedule-modal-close {
    background: rgba(255, 255, 255, 0.2);
    border: none;
    color: white;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.5rem;
    line-height: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
    flex-shrink: 0;
    transition: all 0.2s;
  }

  .schedule-modal-close:hover {
    background: rgba(255, 255, 255, 0.3);
  }

  .schedule-modal-body {
    padding: 1.25rem;
  }

  .schedule-modal-body label {
    display: block;
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.5rem;
    font-size: 0.875rem;
  }

  .schedule-modal-body input {
    width: 100%;
    padding: 0.625rem;
    border: 2px solid #e5e7eb;
    border-radius: 6px;
    font-size: 0.875rem;
    transition: all 0.2s;
    box-sizing: border-box;
  }

  .schedule-modal-body input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .schedule-search-results {
    margin-top: 1rem;
    max-height: 300px;
    overflow-y: auto;
    border: 2px solid #e5e7eb;
    border-radius: 6px;
  }

  .schedule-search-item {
    padding: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
    cursor: pointer;
    transition: all 0.2s;
  }

  .schedule-search-item:last-child {
    border-bottom: none;
  }

  .schedule-search-item:hover {
    background: #f3f4f6;
  }

  .schedule-search-empty {
    padding: 2rem;
    text-align: center;
    color: #9ca3af;
    font-size: 0.875rem;
  }

  /* 로딩 */
  .schedule-loading-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 99999 !important;
    align-items: center;
    justify-content: center;
  }

  .schedule-loading-overlay.show {
    display: flex !important;
  }

  .schedule-loading-content {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
  }

  .schedule-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid #e5e7eb;
    border-top-color: #667eea;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }
</style>

<div class="schedule-manager-wrapper">
  <div class="max-w-7xl mx-auto">
    <!-- 헤더 -->
    <div class="header-card">
      <h2 class="header-title">🎵 시간표 관리</h2>
      <p class="text-sm text-gray-600 mt-1">수강생을 시간표에 배치하고 관리합니다</p>
    </div>

    <!-- 선생님 탭 -->
    <div class="tabs-card">
      <div style="display: flex; gap: 0.5rem; overflow-x: auto;">
        <% @teachers.each_with_index do |teacher, index| %>
          <button
            onclick="switchScheduleTeacher('<%= teacher %>')"
            data-teacher="<%= teacher %>"
            class="teacher-tab <%= index == 0 ? 'active' : '' %>">
            👨‍🏫 <%= teacher %>
          </button>
        <% end %>
      </div>
    </div>

    <!-- 주차 네비게이션 -->
    <div class="nav-card">
      <div style="display: flex; justify-content: space-between; align-items: center;">
        <button onclick="changeScheduleWeek(-1)" class="nav-btn">← 이전 주</button>
        <div style="text-align: center;">
          <div id="schedule-week-display" style="font-size: 1.125rem; font-weight: 700;"></div>
          <div id="schedule-date-range" style="font-size: 0.875rem; color: #6b7280; margin-top: 0.25rem;"></div>
        </div>
        <button onclick="changeScheduleWeek(1)" class="nav-btn">다음 주 →</button>
      </div>
    </div>

    <!-- 시간표와 미배치 회원 영역을 나란히 배치 -->
    <div style="display: flex; gap: 1rem;">
      <!-- 시간표 테이블 -->
      <div class="table-container" style="flex: 1;">
        <div style="overflow-x: auto;">
          <table>
            <thead>
              <tr>
                <th class="time-cell" style="position: sticky; left: 0; z-index: 20;">시간</th>
                <% ['월', '화', '수', '목', '금', '토', '일'].each_with_index do |day_name, index| %>
                  <th>
                    <%= day_name %>
                    <div id="date-<%= ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'][index] %>" style="font-size: 0.75rem; font-weight: 400; opacity: 0.9; margin-top: 0.25rem;"></div>
                  </th>
                <% end %>
              </tr>
            </thead>
            <tbody>
              <% ['13-14', '14-15', '15-16', '16-17', '17-18', '19-20', '20-21', '21-22'].each do |time_slot| %>
                <tr>
                  <td class="time-cell"><%= time_slot.split('-').join(':00-') + ':00' %></td>
                  <% ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'].each do |day| %>
                    <td>
                      <div id="cell-<%= day %>-<%= time_slot %>" class="schedule-cell">
                        <div class="cell-header">
                          <button onclick="showAddStudentModal('<%= day %>', '<%= time_slot %>')" class="add-btn" title="학생 추가">+</button>
                        </div>
                        <div class="students-area empty" data-day="<%= day %>" data-time="<%= time_slot %>">
                          클릭하여 추가
                        </div>
                      </div>
                    </td>
                  <% end %>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>

      <!-- 미배치 회원 영역 (세로) -->
      <div style="width: 200px; flex-shrink: 0;">
        <div class="header-card" style="margin: 0; height: 100%;">
          <div style="margin-bottom: 10px; font-weight: 600; color: #374151; font-size: 0.9rem;">📋 미배치 회원</div>
          <div id="unschedule-dropzone" class="unschedule-zone" style="height: calc(100% - 40px); min-height: 600px;">
            <div class="unschedule-header" style="padding-bottom: 8px; margin-bottom: 8px;">
              <div class="unschedule-icon" style="font-size: 1.5rem; margin-bottom: 5px;">📦</div>
              <div class="unschedule-text" style="font-size: 0.75rem;">드롭하면 해제</div>
            </div>
            <div id="unscheduled-students" class="unscheduled-students-area" style="flex-direction: column; align-items: stretch;"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 학생 추가 모달 -->
<div id="add-student-modal" class="schedule-modal-overlay">
  <div class="schedule-modal-content">
    <div class="schedule-modal-header">
      <h3>👨‍🎓 수강생 추가</h3>
      <button onclick="closeAddStudentModal()" class="schedule-modal-close">&times;</button>
    </div>
    <div class="schedule-modal-body">
      <label>🔍 수강생 검색</label>
      <input
        type="text"
        id="modal-student-search"
        placeholder="이름 또는 아이디로 검색..."
        onkeyup="searchStudentsInModal(this.value)">
      <div id="modal-search-results" class="schedule-search-results">
        <div class="schedule-search-empty">검색어를 입력하세요</div>
      </div>
    </div>
  </div>
</div>

<!-- 회원 상세 정보 모달 -->
<div id="student-detail-modal" class="schedule-modal-overlay">
  <div class="schedule-modal-content" style="max-width: 800px;">
    <div class="schedule-modal-header">
      <h3 id="student-detail-title">👨‍🎓 회원 상세 정보</h3>
      <button onclick="closeStudentDetailModal()" class="schedule-modal-close">&times;</button>
    </div>
    <div class="schedule-modal-body" style="max-height: 70vh; overflow-y: auto;">
      <div id="student-detail-content">
        <div style="text-align: center; padding: 20px; color: #9ca3af;">로딩 중...</div>
      </div>
    </div>
  </div>
</div>

<!-- 로딩 -->
<div id="schedule-loading" class="schedule-loading-overlay">
  <div class="schedule-loading-content">
    <div class="schedule-spinner"></div>
    <p style="margin-top: 1rem; font-weight: 600; color: #374151;">처리 중...</p>
  </div>
</div>

<script>
(function() {
  window.currentScheduleTeacher = '<%= @teachers.first %>';
  window.currentScheduleWeek = 0;
  window.scheduleData = {};
  window.modalTargetDay = '';
  window.modalTargetTime = '';
  window.modalSearchTimeout = null;
  window.teacherHolidays = <%= raw @teacher_holidays.to_json %>;

  window.switchScheduleTeacher = function(teacher) {
    window.currentScheduleTeacher = teacher;
    document.querySelectorAll('.teacher-tab').forEach(tab => {
      if (tab.dataset.teacher === teacher) {
        tab.classList.add('active');
      } else {
        tab.classList.remove('active');
      }
    });
    updateHolidayCells();
    loadScheduleData();
  };

  window.changeScheduleWeek = function(offset) {
    window.currentScheduleWeek += offset;
    updateScheduleWeekDisplay();
    loadScheduleData();
  };

  window.isTeacherHoliday = function(teacher, dayOfWeek) {
    const holidays = window.teacherHolidays[teacher] || [];
    return holidays.includes(dayOfWeek);
  };

  window.updateScheduleWeekDisplay = function() {
    const today = new Date();
    const weekStart = new Date(today);
    weekStart.setDate(today.getDate() - today.getDay() + (window.currentScheduleWeek * 7));
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekStart.getDate() + 6);

    const weekDisplayEl = document.getElementById('schedule-week-display');
    const dateRangeEl = document.getElementById('schedule-date-range');

    if (weekDisplayEl) {
      weekDisplayEl.textContent = `${weekStart.getFullYear()}년 ${weekStart.getMonth() + 1}월 ${weekStart.getDate()}일 주`;
    }
    if (dateRangeEl) {
      dateRangeEl.textContent = `${weekStart.getMonth() + 1}/${weekStart.getDate()} - ${weekEnd.getMonth() + 1}/${weekEnd.getDate()}`;
    }

    const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
    days.forEach((day, index) => {
      const dayDate = new Date(weekStart);
      // weekStart는 일요일이므로, mon은 +1, tue는 +2, ... sun은 +7
      dayDate.setDate(weekStart.getDate() + index + 1);
      const dateEl = document.getElementById(`date-${day}`);
      if (dateEl) {
        dateEl.textContent = `${dayDate.getMonth() + 1}/${dayDate.getDate()}`;
      }
    });

    // 휴무일 표시 업데이트
    updateHolidayCells();
  };

  window.updateHolidayCells = function() {
    const today = new Date();
    const weekStart = new Date(today);
    weekStart.setDate(today.getDate() - today.getDay() + (window.currentScheduleWeek * 7));

    const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];
    days.forEach((day, index) => {
      const dayDate = new Date(weekStart);
      // weekStart는 일요일이므로, mon은 +1, tue는 +2, ... sun은 +7
      dayDate.setDate(weekStart.getDate() + index + 1);
      const dayOfWeek = dayDate.getDay();

      const isHoliday = isTeacherHoliday(window.currentScheduleTeacher, dayOfWeek);

      // 해당 요일의 모든 시간대 셀에 휴무일 표시
      ['13-14', '14-15', '15-16', '16-17', '17-18', '19-20', '20-21', '21-22'].forEach(timeSlot => {
        const cell = document.getElementById(`cell-${day}-${timeSlot}`);
        if (cell) {
          if (isHoliday) {
            cell.classList.add('holiday');
          } else {
            cell.classList.remove('holiday');
          }
        }
      });
    });
  };

  window.loadScheduleData = async function() {
    showScheduleLoading(true);
    window.scheduleData = {};

    document.querySelectorAll('.students-area').forEach(container => {
      container.innerHTML = '클릭하여 추가';
      container.classList.add('empty');
    });

    try {
      const response = await fetch(`/admin/load_schedule?teacher=${encodeURIComponent(window.currentScheduleTeacher)}&week_offset=${window.currentScheduleWeek}`);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const data = await response.json();

      if (data.success) {
        renderScheduleData(data.schedules);
        // 미배치 회원은 선생님 탭이 바뀔 때마다가 아니라 처음 한 번만 로드
        if (!window.unscheduledStudentsLoaded) {
          loadUnscheduledStudents();
          window.unscheduledStudentsLoaded = true;
        }
      } else {
        alert('시간표를 불러오는데 실패했습니다: ' + (data.message || '알 수 없는 오류'));
      }
    } catch (error) {
      console.error('Error loading schedule:', error);
      alert('시간표를 불러오는데 실패했습니다.');
    } finally {
      showScheduleLoading(false);
    }
  };

  window.renderScheduleData = function(schedules) {
    for (const [day, timeSlots] of Object.entries(schedules)) {
      for (const [timeSlot, students] of Object.entries(timeSlots)) {
        if (!window.scheduleData[day]) window.scheduleData[day] = {};
        if (!window.scheduleData[day][timeSlot]) window.scheduleData[day][timeSlot] = [];

        const cell = document.getElementById(`cell-${day}-${timeSlot}`);
        if (!cell) continue;

        const container = cell.querySelector('.students-area');
        if (!container) continue;

        if (students.length > 0) {
          container.classList.remove('empty');
          container.innerHTML = '';
        }

        students.forEach(student => {
          if (!student.is_pass && !student.is_makeup_away && !student.is_makeup && !student.is_absent) {
            window.scheduleData[day][timeSlot].push(student.id);
            const card = createScheduleStudentCard(student, day, timeSlot);
            container.appendChild(card);
          }
        });
      }
    }
  };

  window.createScheduleStudentCard = function(student, day, timeSlot) {
    const card = document.createElement('div');
    card.className = 'student-card';
    card.dataset.userId = student.id;
    card.dataset.currentDay = day;
    card.dataset.currentTimeSlot = timeSlot;
    card.dataset.teacher = window.currentScheduleTeacher;
    card.draggable = true;

    // 휴원 상태에 따른 배경색 설정
    if (student.is_on_leave) {
      card.style.background = '#fef3c7'; // 연노랑
      card.style.borderColor = '#fbbf24';
    } else {
      card.style.background = '#d9f99d'; // 연두색
      card.style.borderColor = '#84cc16';
    }

    const usernameDiv = document.createElement('div');
    usernameDiv.style.fontSize = '0.875rem';
    usernameDiv.style.color = '#111827';
    usernameDiv.style.fontWeight = '600';
    usernameDiv.style.textAlign = 'center';
    usernameDiv.style.pointerEvents = 'none'; // 드래그 시 텍스트 선택 방지

    // 휴원 상태 표시
    if (student.is_on_leave) {
      usernameDiv.textContent = student.username + ' (휴원)';
    } else {
      usernameDiv.textContent = student.username;
    }

    card.appendChild(usernameDiv);

    // 클릭 이벤트 추가
    card.addEventListener('click', function(e) {
      e.stopPropagation();
      showStudentDetailModal(student.id);
    });

    // 드래그 이벤트
    card.addEventListener('dragstart', handleDragStart);
    card.addEventListener('dragend', handleDragEnd);

    return card;
  };

  window.showAddStudentModal = function(day, timeSlot) {
    const currentCount = window.scheduleData[day]?.[timeSlot]?.length || 0;
    if (currentCount >= 3) {
      alert('이 시간대는 이미 3명으로 가득 찼습니다.');
      return;
    }

    window.modalTargetDay = day;
    window.modalTargetTime = timeSlot;

    const searchInput = document.getElementById('modal-student-search');
    const searchResults = document.getElementById('modal-search-results');
    const modal = document.getElementById('add-student-modal');

    if (searchInput) searchInput.value = '';
    if (searchResults) searchResults.innerHTML = '<div class="schedule-search-empty">검색어를 입력하세요</div>';
    if (modal) modal.classList.add('show');
  };

  window.closeAddStudentModal = function() {
    const modal = document.getElementById('add-student-modal');
    if (modal) modal.classList.remove('show');
  };

  window.searchStudentsInModal = async function(query) {
    clearTimeout(window.modalSearchTimeout);

    const resultsDiv = document.getElementById('modal-search-results');
    if (!resultsDiv) return;

    if (query.length < 2) {
      resultsDiv.innerHTML = '<div class="schedule-search-empty">검색어를 입력하세요</div>';
      return;
    }

    window.modalSearchTimeout = setTimeout(async () => {
      try {
        const response = await fetch(`/admin/search_students?search=${encodeURIComponent(query)}&teacher=${encodeURIComponent(window.currentScheduleTeacher)}`);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();

        resultsDiv.innerHTML = '';

        if (data.students && data.students.length > 0) {
          data.students.forEach(student => {
            const item = document.createElement('div');
            item.className = 'schedule-search-item';

            const nameDiv = document.createElement('div');
            nameDiv.style.fontWeight = '700';
            nameDiv.style.color = '#111827';
            nameDiv.textContent = `🎵 ${student.name}`;

            const infoDiv = document.createElement('div');
            infoDiv.style.fontSize = '0.75rem';
            infoDiv.style.color = '#6b7280';
            infoDiv.style.marginTop = '0.25rem';
            infoDiv.textContent = `${student.username} - ${student.teacher}`;

            item.appendChild(nameDiv);
            item.appendChild(infoDiv);
            item.onclick = () => window.addStudentToSchedule(student);
            resultsDiv.appendChild(item);
          });
        } else {
          resultsDiv.innerHTML = '<div class="schedule-search-empty">검색 결과가 없습니다</div>';
        }
      } catch (error) {
        console.error('Error searching students:', error);
        resultsDiv.innerHTML = '<div class="schedule-search-empty" style="color: #ef4444;">검색 중 오류가 발생했습니다</div>';
      }
    }, 300);
  };

  window.addStudentToSchedule = function(student) {
    const day = window.modalTargetDay;
    const timeSlot = window.modalTargetTime;

    if (window.scheduleData[day]?.[timeSlot]?.includes(student.id)) {
      alert('이미 추가된 학생입니다.');
      return;
    }

    if (!window.scheduleData[day]) window.scheduleData[day] = {};
    if (!window.scheduleData[day][timeSlot]) window.scheduleData[day][timeSlot] = [];

    if (window.scheduleData[day][timeSlot].length >= 3) {
      alert('이 시간대는 이미 3명으로 가득 찼습니다.');
      return;
    }

    window.scheduleData[day][timeSlot].push(student.id);

    const cell = document.getElementById(`cell-${day}-${timeSlot}`);
    const container = cell.querySelector('.students-area');

    if (container) {
      if (container.classList.contains('empty')) {
        container.classList.remove('empty');
        container.innerHTML = '';
      }

      const card = createScheduleStudentCard(student, day, timeSlot);
      container.appendChild(card);
    }

    closeAddStudentModal();

    // 자동 저장
    autoSaveSchedule();
  };

  window.removeStudentFromSchedule = function(userId, day, timeSlot) {
    if (!confirm('이 학생을 시간표에서 제거하시겠습니까?')) return;

    if (window.scheduleData[day]?.[timeSlot]) {
      window.scheduleData[day][timeSlot] = window.scheduleData[day][timeSlot].filter(id => id !== userId);
    }

    const cell = document.getElementById(`cell-${day}-${timeSlot}`);
    const container = cell.querySelector('.students-area');
    const cards = container ? container.querySelectorAll(`[data-user-id="${userId}"]`) : [];

    cards.forEach(card => card.remove());

    if (container && container.children.length === 0) {
      container.classList.add('empty');
      container.innerHTML = '클릭하여 추가';
    }

    // 자동 저장
    autoSaveSchedule();
  };

  // 자동 저장 (디바운싱 적용)
  let autoSaveTimeout = null;
  window.autoSaveSchedule = function() {
    clearTimeout(autoSaveTimeout);

    autoSaveTimeout = setTimeout(async () => {
      try {
        const response = await fetch('/admin/save_schedule', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
          },
          body: JSON.stringify({
            teacher: window.currentScheduleTeacher,
            schedules: window.scheduleData
          })
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        const data = await response.json();

        if (data.success) {
          console.log('시간표가 자동 저장되었습니다.');
        } else {
          console.error('자동 저장 실패:', data.message);
        }
      } catch (error) {
        console.error('Error auto-saving schedule:', error);
      }
    }, 500); // 500ms 후 저장
  };

  window.showScheduleLoading = function(show) {
    const loading = document.getElementById('schedule-loading');
    if (loading) {
      if (show) {
        loading.classList.add('show');
      } else {
        loading.classList.remove('show');
      }
    }
  };

  window.setupEmptyContainerClicks = function() {
    document.querySelectorAll('.students-area').forEach(container => {
      const newContainer = container.cloneNode(true);
      container.parentNode.replaceChild(newContainer, container);

      newContainer.addEventListener('click', function(e) {
        if (e.target.closest('.student-card')) return;

        const day = this.dataset.day;
        const time = this.dataset.time;

        if (day && time) {
          window.showAddStudentModal(day, time);
        }
      });
    });
  };

  // 회원 상세 정보 모달 표시
  window.showStudentDetailModal = function(userId) {
    const modal = document.getElementById('student-detail-modal');
    modal.classList.add('show');

    // 데이터 로드
    fetch(`/admin/student_detail/${userId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          renderStudentDetail(data);
        } else {
          alert('회원 정보를 불러오는데 실패했습니다.');
          closeStudentDetailModal();
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('회원 정보를 불러오는데 실패했습니다.');
        closeStudentDetailModal();
      });
  };

  // 회원 상세 정보 렌더링
  function renderStudentDetail(data) {
    const { user, makeup_pass_requests, payments, enrollments, remaining_lessons, remaining_passes } = data;

    document.getElementById('student-detail-title').textContent = `👨‍🎓 ${user.name} (${user.username})`;

    let html = '';

    // 남은 수업/패스 횟수
    html += '<div style="background: #f0f9ff; border: 2px solid #bae6fd; border-radius: 8px; padding: 15px; margin-bottom: 20px;">';
    html += '<div style="display: flex; justify-content: space-around; text-align: center;">';
    html += '<div><div style="font-size: 0.85rem; color: #0369a1; margin-bottom: 5px;">남은 수업</div>';
    html += `<div style="font-size: 1.5rem; font-weight: 700; color: #0369a1;">${remaining_lessons}회</div></div>`;
    html += '<div><div style="font-size: 0.85rem; color: #0369a1; margin-bottom: 5px;">남은 패스</div>';
    html += `<div style="font-size: 1.5rem; font-weight: 700; color: #0369a1;">${remaining_passes}회</div></div>`;
    html += '</div></div>';

    // 수강 정보
    html += '<div style="margin-bottom: 20px;"><h4 style="font-weight: 700; margin-bottom: 10px; color: #374151;">📚 수강 정보</h4>';
    if (enrollments.length > 0) {
      enrollments.forEach(enrollment => {
        const statusColor = enrollment.status === 'active' ? '#10b981' : '#f59e0b';
        const statusText = enrollment.status === 'active' ? '활성' : '휴원';
        html += '<div style="background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 12px; margin-bottom: 8px;">';
        html += `<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;">`;
        html += `<span style="font-weight: 600;">${enrollment.teacher} - ${enrollment.subject}</span>`;
        html += `<span style="padding: 3px 8px; background: ${statusColor}20; color: ${statusColor}; border-radius: 4px; font-size: 0.75rem; font-weight: 600;">${statusText}</span>`;
        html += '</div>';
        html += `<div style="font-size: 0.85rem; color: #6b7280;">${enrollment.day} ${enrollment.time_slot} | 남은 수업: ${enrollment.remaining_lessons}회</div>`;
        html += `<div style="font-size: 0.75rem; color: #9ca3af; margin-top: 3px;">첫 수업: ${enrollment.first_lesson_date || '-'} | 종료: ${enrollment.end_date || '-'}</div>`;
        html += '</div>';
      });
    } else {
      html += '<div style="text-align: center; padding: 20px; color: #9ca3af;">수강 정보가 없습니다.</div>';
    }
    html += '</div>';

    // 보강/패스 신청 내역
    html += '<div style="margin-bottom: 20px;"><h4 style="font-weight: 700; margin-bottom: 10px; color: #374151;">🔄 보강/패스 신청 내역</h4>';
    if (makeup_pass_requests.length > 0) {
      makeup_pass_requests.forEach(req => {
        const typeColor = req.request_type === 'makeup' ? '#3b82f6' : '#f59e0b';
        const typeText = req.request_type === 'makeup' ? '보강' : '패스';
        const statusColor = req.status === 'active' ? '#10b981' : (req.status === 'cancelled' ? '#ef4444' : '#9ca3af');
        const statusText = req.status === 'active' ? '승인' : (req.status === 'cancelled' ? '취소' : req.status);

        html += '<div style="background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 12px; margin-bottom: 8px;">';
        html += '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;">';
        html += `<span style="padding: 3px 8px; background: ${typeColor}20; color: ${typeColor}; border-radius: 4px; font-size: 0.75rem; font-weight: 600;">${typeText}</span>`;
        html += `<span style="padding: 3px 8px; background: ${statusColor}20; color: ${statusColor}; border-radius: 4px; font-size: 0.75rem; font-weight: 600;">${statusText}</span>`;
        html += '</div>';
        html += `<div style="font-size: 0.85rem; color: #374151; margin-top: 5px;">신청일: ${req.request_date}</div>`;
        if (req.request_type === 'makeup') {
          html += `<div style="font-size: 0.85rem; color: #6b7280;">보강일: ${req.makeup_date || '-'} ${req.makeup_day || ''} ${req.makeup_time_slot || ''}</div>`;
          html += `<div style="font-size: 0.85rem; color: #6b7280;">선생님: ${req.makeup_teacher || '-'}</div>`;
        }
        html += `<div style="font-size: 0.75rem; color: #9ca3af; margin-top: 3px;">${req.created_at}</div>`;
        html += '</div>';
      });
    } else {
      html += '<div style="text-align: center; padding: 20px; color: #9ca3af;">신청 내역이 없습니다.</div>';
    }
    html += '</div>';

    // 결제 내역
    html += '<div style="margin-bottom: 20px;"><h4 style="font-weight: 700; margin-bottom: 10px; color: #374151;">💳 결제 내역</h4>';
    if (payments.length > 0) {
      payments.forEach(payment => {
        html += '<div style="background: #f9fafb; border: 1px solid #e5e7eb; border-radius: 6px; padding: 12px; margin-bottom: 8px;">';
        html += `<div style="font-weight: 600; margin-bottom: 5px;">${payment.teacher} - ${payment.subject}</div>`;
        html += `<div style="font-size: 0.85rem; color: #6b7280;">수업: ${payment.lessons}회 / 기간: ${payment.months}개월</div>`;
        html += `<div style="font-size: 0.85rem; color: #6b7280;">결제일: ${payment.payment_date}</div>`;
        html += `<div style="font-size: 0.85rem; color: #6b7280;">첫 수업: ${payment.first_lesson_date || '-'} ${payment.first_lesson_time || ''}</div>`;
        html += '</div>';
      });
    } else {
      html += '<div style="text-align: center; padding: 20px; color: #9ca3af;">결제 내역이 없습니다.</div>';
    }
    html += '</div>';

    document.getElementById('student-detail-content').innerHTML = html;
  }

  // 회원 상세 정보 모달 닫기
  window.closeStudentDetailModal = function() {
    document.getElementById('student-detail-modal').classList.remove('show');
  };

  // 커스텀 드래그 앤 드롭 핸들러 (마우스휠 지원)
  let draggedCard = null;
  let isDragging = false;
  let dragClone = null;
  let startX, startY;

  function handleDragStart(e) {
    // HTML5 드래그 기본 동작 유지하되, 커스텀 처리도 추가
    draggedCard = this;
    this.classList.add('dragging');
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/html', this.innerHTML);
  }

  function handleDragEnd(e) {
    this.classList.remove('dragging');

    // 모든 드롭 존에서 drag-over 클래스 제거
    document.querySelectorAll('.students-area').forEach(area => {
      area.classList.remove('drag-over');
    });
    document.getElementById('unschedule-dropzone').classList.remove('drag-over');
  }

  function handleDragOver(e) {
    if (e.preventDefault) {
      e.preventDefault();
    }
    e.dataTransfer.dropEffect = 'move';
    return false;
  }

  function handleDragEnter(e) {
    this.classList.add('drag-over');
  }

  function handleDragLeave(e) {
    this.classList.remove('drag-over');
  }

  function handleDrop(e) {
    if (e.stopPropagation) {
      e.stopPropagation();
    }

    this.classList.remove('drag-over');

    if (draggedCard) {
      const userId = draggedCard.dataset.userId;
      const currentDay = draggedCard.dataset.currentDay;
      const currentTimeSlot = draggedCard.dataset.currentTimeSlot;
      const fromTeacher = draggedCard.dataset.teacher;
      const newDay = this.dataset.day;
      const newTimeSlot = this.dataset.time;

      // 같은 위치에 드롭하면 무시
      if (currentDay === newDay && currentTimeSlot === newTimeSlot) {
        return false;
      }

      // 현재 학생 수 확인
      const currentCount = window.scheduleData[newDay]?.[newTimeSlot]?.length || 0;
      if (currentCount >= 3) {
        alert('해당 시간대는 이미 가득 찼습니다.');
        return false;
      }

      // 미배치 회원에서 스케줄로 이동하는 경우
      if (!currentDay && !currentTimeSlot) {
        scheduleUnscheduledStudent(userId, newDay, newTimeSlot);
      } else {
        // 스케줄 간 이동
        moveStudentSchedule(userId, fromTeacher, currentDay, currentTimeSlot, newDay, newTimeSlot);
      }
    }

    return false;
  }

  // 미배치 회원을 스케줄에 배치
  function scheduleUnscheduledStudent(userId, day, timeSlot) {
    showScheduleLoading(true);

    fetch('/admin/schedule_unscheduled_student', {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: userId,
        day: day,
        time_slot: timeSlot,
        teacher: window.currentScheduleTeacher
      })
    })
    .then(response => response.json())
    .then(data => {
      showScheduleLoading(false);
      if (data.success) {
        alert('스케줄에 배치되었습니다.');
        loadScheduleData();
        loadUnscheduledStudents(); // 미배치 회원 목록 다시 로드
      } else {
        alert('스케줄 배치 실패: ' + (data.error || '알 수 없는 오류'));
      }
    })
    .catch(error => {
      showScheduleLoading(false);
      console.error('Error:', error);
      alert('스케줄 배치 중 오류가 발생했습니다.');
    });
  }

  function handleUnscheduleDropZoneDragOver(e) {
    if (e.preventDefault) {
      e.preventDefault();
    }
    e.dataTransfer.dropEffect = 'move';
    return false;
  }

  function handleUnscheduleDropZoneDragEnter(e) {
    document.getElementById('unschedule-dropzone').classList.add('drag-over');
  }

  function handleUnscheduleDropZoneDragLeave(e) {
    document.getElementById('unschedule-dropzone').classList.remove('drag-over');
  }

  function handleUnscheduleDropZoneDrop(e) {
    if (e.stopPropagation) {
      e.stopPropagation();
    }

    document.getElementById('unschedule-dropzone').classList.remove('drag-over');

    if (draggedCard) {
      const userId = draggedCard.dataset.userId;
      const currentDay = draggedCard.dataset.currentDay;
      const currentTimeSlot = draggedCard.dataset.currentTimeSlot;

      // 이미 미배치 회원인 경우 아무것도 하지 않음
      if (!currentDay && !currentTimeSlot) {
        return false;
      }

      if (confirm('스케줄을 해제하시겠습니까? (결제 및 수업 정보는 유지됩니다)')) {
        // 서버에 스케줄 해제 요청
        unscheduleStudent(userId, currentDay, currentTimeSlot);
      }
    }

    return false;
  }

  // 학생 스케줄 이동
  function moveStudentSchedule(userId, fromTeacher, fromDay, fromTimeSlot, toDay, toTimeSlot) {
    showScheduleLoading(true);

    fetch('/admin/move_student_schedule', {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: userId,
        from_teacher: fromTeacher,
        from_day: fromDay,
        from_time_slot: fromTimeSlot,
        to_day: toDay,
        to_time_slot: toTimeSlot,
        to_teacher: window.currentScheduleTeacher
      })
    })
    .then(response => response.json())
    .then(data => {
      showScheduleLoading(false);
      if (data.success) {
        alert('스케줄이 이동되었습니다.');
        loadScheduleData();
        loadUnscheduledStudents(); // 미배치 회원 목록 다시 로드
      } else {
        alert('스케줄 이동 실패: ' + (data.error || '알 수 없는 오류'));
      }
    })
    .catch(error => {
      showScheduleLoading(false);
      console.error('Error:', error);
      alert('스케줄 이동 중 오류가 발생했습니다.');
    });
  }

  // 학생 스케줄 해제
  function unscheduleStudent(userId, day, timeSlot) {
    showScheduleLoading(true);

    fetch('/admin/unschedule_student', {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        user_id: userId,
        day: day,
        time_slot: timeSlot,
        teacher: window.currentScheduleTeacher
      })
    })
    .then(response => response.json())
    .then(data => {
      showScheduleLoading(false);
      if (data.success) {
        alert('스케줄이 해제되었습니다.');
        loadScheduleData();
        loadUnscheduledStudents(); // 미배치 회원 목록 다시 로드
      } else {
        alert('스케줄 해제 실패: ' + (data.error || '알 수 없는 오류'));
      }
    })
    .catch(error => {
      showScheduleLoading(false);
      console.error('Error:', error);
      alert('스케줄 해제 중 오류가 발생했습니다.');
    });
  }

  // 미배치 회원 로드 (모든 선생님 공통)
  function loadUnscheduledStudents() {
    fetch('/admin/unscheduled_students')
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          renderUnscheduledStudents(data.students);
        }
      })
      .catch(error => {
        console.error('미배치 회원 로드 에러:', error);
      });
  }

  // 미배치 회원 렌더링
  function renderUnscheduledStudents(students) {
    const container = document.getElementById('unscheduled-students');
    container.innerHTML = '';

    students.forEach(student => {
      const card = createUnscheduledStudentCard(student);
      container.appendChild(card);
    });
  }

  // 미배치 회원 카드 생성
  function createUnscheduledStudentCard(student) {
    const card = document.createElement('div');
    card.className = 'student-card';
    card.dataset.userId = student.id;
    card.dataset.currentDay = '';
    card.dataset.currentTimeSlot = '';
    card.draggable = true;
    card.style.background = '#fef3c7';
    card.style.borderColor = '#f59e0b';
    card.style.padding = '8px';

    const usernameDiv = document.createElement('div');
    usernameDiv.style.fontSize = '0.875rem';
    usernameDiv.style.color = '#111827';
    usernameDiv.style.fontWeight = '600';
    usernameDiv.style.textAlign = 'center';
    usernameDiv.style.pointerEvents = 'none';
    usernameDiv.textContent = student.username;

    const teachersDiv = document.createElement('div');
    teachersDiv.style.fontSize = '0.7rem';
    teachersDiv.style.color = '#92400e';
    teachersDiv.style.textAlign = 'center';
    teachersDiv.style.marginTop = '4px';
    teachersDiv.style.pointerEvents = 'none';
    teachersDiv.textContent = student.teachers ? student.teachers.join(', ') : '';

    card.appendChild(usernameDiv);
    card.appendChild(teachersDiv);

    // 클릭 이벤트
    card.addEventListener('click', function(e) {
      e.stopPropagation();
      showStudentDetailModal(student.id);
    });

    // 드래그 이벤트
    card.addEventListener('dragstart', handleDragStart);
    card.addEventListener('dragend', handleDragEnd);

    return card;
  }

  // 드롭 존 이벤트 리스너 설정
  function setupDropZones() {
    // 모든 students-area에 드롭 이벤트 추가
    document.querySelectorAll('.students-area').forEach(area => {
      area.addEventListener('dragover', handleDragOver);
      area.addEventListener('dragenter', handleDragEnter);
      area.addEventListener('dragleave', handleDragLeave);
      area.addEventListener('drop', handleDrop);
    });

    // 스케줄 해제 영역에 드롭 이벤트 추가
    const unscheduleZone = document.getElementById('unschedule-dropzone');
    if (unscheduleZone) {
      unscheduleZone.addEventListener('dragover', handleUnscheduleDropZoneDragOver);
      unscheduleZone.addEventListener('dragenter', handleUnscheduleDropZoneDragEnter);
      unscheduleZone.addEventListener('dragleave', handleUnscheduleDropZoneDragLeave);
      unscheduleZone.addEventListener('drop', handleUnscheduleDropZoneDrop);
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      updateScheduleWeekDisplay();
      loadScheduleData();
      setupEmptyContainerClicks();
      setupDropZones();
    });
  } else {
    updateScheduleWeekDisplay();
    loadScheduleData();
    setupEmptyContainerClicks();
    setupDropZones();
  }
})();
</script>
