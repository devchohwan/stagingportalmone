<style>
  .users-container {
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    border: 1px solid #e2e8f0;
    overflow: hidden;
  }
  
  .users-content {
    padding: 25px;
  }
  
  .users-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
  }
  
  .table-header {
    background: #f8fafc;
  }
  
  .table-header th {
    padding: 15px 12px;
    text-align: left;
    font-weight: 600;
    font-size: 0.8rem;
    color: #4a5568;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border-bottom: 1px solid #e2e8f0;
  }
  
  .table-header th:first-child {
    border-radius: 8px 0 0 0;
  }
  
  .table-header th:last-child {
    border-radius: 0 8px 0 0;
  }
  
  .user-row {
    transition: background-color 0.2s ease;
  }
  
  .user-row:hover {
    background: #f8fafc;
  }
  
  .user-row td {
    padding: 15px 12px;
    border-bottom: 1px solid #f1f5f9;
    font-size: 0.9rem;
  }
  
  .user-row.waiting-row {
    background: #fffbeb;
  }
  
  .user-row.hold-row {
    background: #fef3f2;
  }
  
  .user-row.penalty-row {
    background: #fef2f2;
  }
  
  .user-name {
    font-weight: 600;
    color: #2d3748;
  }
  
  .admin-badge {
    display: inline-flex;
    align-items: center;
    background: linear-gradient(135deg, #fa709a, #fee140);
    color: white;
    font-size: 0.7rem;
    font-weight: 600;
    padding: 3px 8px;
    border-radius: 12px;
    margin-left: 8px;
  }
  
  .admin-badge::after {
    content: 'üëë';
    margin-left: 4px;
  }
  
  .phone-input {
    padding: 6px 10px;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: 0.85rem;
    width: 120px;
    margin-right: 8px;
    transition: all 0.3s ease;
  }
  
  .phone-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
  }
  
  .phone-update-btn {
    background: #667eea;
    color: white;
    border: none;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .phone-update-btn:hover {
    background: #5a67d8;
    transform: translateY(-1px);
  }
  
  .teacher-select {
    padding: 6px 10px;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: 0.85rem;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .teacher-select:focus {
    outline: none;
    border-color: #667eea;
  }
  
  .status-badge {
    display: inline-flex;
    align-items: center;
    padding: 4px 10px;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
  }
  
  .status-waiting {
    background: #fef3c7;
    color: #92400e;
  }
  
  .status-hold {
    background: #fed7aa;
    color: #c2410c;
  }
  
  .status-blocked {
    background: #fecaca;
    color: #991b1b;
  }
  
  .status-warning {
    background: #fed7aa;
    color: #c2410c;
  }
  
  .status-normal {
    background: #dcfce7;
    color: #166534;
  }
  
  .system-badge {
    padding: 3px 8px;
    border-radius: 8px;
    font-size: 0.75rem;
    font-weight: 600;
  }
  
  .system-practice {
    background: #e0e7ff;
    color: #3730a3;
  }
  
  .system-makeup {
    background: #fce7f3;
    color: #be185d;
  }
  
  .system-pitch {
    background: #ddd6fe;
    color: #5b21b6;
  }
  
  .action-btn {
    padding: 6px 12px;
    border: none;
    border-radius: 6px;
    font-size: 0.8rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-right: 6px;
  }
  
  .action-btn:hover {
    transform: translateY(-1px);
  }
  
  .btn-approve {
    background: #10b981;
    color: white;
  }
  
  .btn-approve:hover {
    background: #059669;
  }
  
  .btn-hold {
    background: #f59e0b;
    color: white;
  }
  
  .btn-hold:hover {
    background: #d97706;
  }
  
  .btn-reject {
    background: #ef4444;
    color: white;
  }
  
  .btn-reject:hover {
    background: #dc2626;
  }
  
  .btn-reset {
    background: #8b5cf6;
    color: white;
  }
  
  .btn-reset:hover {
    background: #7c3aed;
  }
  
  .btn-text {
    background: none;
    color: #667eea;
    border: none;
    font-size: 0.85rem;
    font-weight: 600;
    cursor: pointer;
    padding: 4px 8px;
    border-radius: 4px;
    transition: all 0.3s ease;
  }
  
  .btn-text:hover {
    background: #eef2ff;
    color: #5a67d8;
  }
  
  .verification-img-btn {
    background: #4f46e5;
    color: white;
    border: none;
    padding: 4px 10px;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .verification-img-btn:hover {
    background: #4338ca;
    transform: translateY(-1px);
  }
  
  .verification-none {
    color: #9ca3af;
    font-size: 0.8rem;
  }
  
  .penalty-count {
    font-size: 1.2rem;
    font-weight: bold;
  }
  
  .penalty-high {
    color: #dc2626;
  }
  
  .penalty-medium {
    color: #f59e0b;
  }
  
  .penalty-low {
    color: #6b7280;
  }
  
  .empty-state {
    text-align: center;
    padding: 60px 20px;
    color: #9ca3af;
  }
  
  .empty-state-icon {
    font-size: 3rem;
    margin-bottom: 16px;
  }
  
  .empty-state-text {
    font-size: 1.1rem;
    font-weight: 500;
  }
  
  /* 320px Î™®Î∞îÏùº ÏµúÏ†ÅÌôî */
  @media (max-width: 320px) {
    .users-container {
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    }
    
    .users-content {
      padding: 16px;
      overflow-x: auto;
    }
    
    .users-table {
      min-width: 600px;
      font-size: 0.8rem;
    }
    
    .table-header th {
      padding: 10px 8px;
      font-size: 0.7rem;
    }
    
    .user-row td {
      padding: 10px 8px;
      font-size: 0.8rem;
    }
    
    .user-name {
      font-size: 0.85rem;
    }
    
    .admin-badge {
      font-size: 0.6rem;
      padding: 2px 6px;
      border-radius: 8px;
      margin-left: 4px;
    }
    
    .phone-input {
      padding: 4px 8px;
      font-size: 0.75rem;
      width: 90px;
      margin-right: 4px;
      border-radius: 4px;
    }
    
    .phone-update-btn {
      padding: 4px 8px;
      font-size: 0.7rem;
      border-radius: 4px;
    }
    
    .teacher-select {
      padding: 4px 8px;
      font-size: 0.75rem;
      border-radius: 4px;
    }
    
    .status-badge {
      padding: 3px 8px;
      font-size: 0.7rem;
      border-radius: 8px;
    }
    
    .system-badge {
      padding: 2px 6px;
      font-size: 0.7rem;
      border-radius: 6px;
    }
    
    .action-btn {
      padding: 4px 8px;
      font-size: 0.7rem;
      border-radius: 4px;
      margin-right: 4px;
    }
    
    .btn-text {
      font-size: 0.75rem;
      padding: 3px 6px;
    }
    
    .penalty-count {
      font-size: 1rem;
    }
    
    .verification-img-btn {
      padding: 3px 8px;
      font-size: 0.7rem;
      border-radius: 4px;
    }
    
    .verification-none {
      font-size: 0.7rem;
    }
    
    .empty-state {
      padding: 40px 16px;
    }
    
    .empty-state-icon {
      font-size: 2.5rem;
      margin-bottom: 12px;
    }
    
    .empty-state-text {
      font-size: 0.95rem;
    }
  }
</style>

<div class="users-container">
  <div class="users-content">
    <%= render partial: 'users_results' %>
  </div>
</div>

<script>
// ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨ Ìï®ÏàòÎì§
function updatePhone(userId, type, system) {
  const phoneInput = document.getElementById(`phone-${type}-${userId}`);
  const phone = phoneInput.value;
  
  const endpoint = system === 'makeup' ? 
    `/admin/makeup/users/${userId}/update_info` : 
    `/admin/practice/users/${userId}/update_info`;
  
  fetch(endpoint, {
    method: 'PATCH',
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ phone: phone })
  }).then(response => {
    if(response.ok) {
      alert('Ï†ÑÌôîÎ≤àÌò∏Í∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.');
    } else {
      alert('Ï†ÑÌôîÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
  });
}

function updateTeacher(userId, teacher, system) {
  const endpoint = system === 'makeup' ? 
    `/admin/makeup/users/${userId}/update_teacher` : 
    `/admin/practice/users/${userId}/update_teacher`;
    
  fetch(endpoint, {
    method: 'PATCH',
    headers: {
      'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ teacher: teacher })
  });
}

function approveUser(userId, system) {
  if(confirm('Ïù¥ ÏÇ¨Ïö©ÏûêÎ•º ÏäπÏù∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
    const endpoint = system === 'makeup' ? 
      `/admin/makeup/users/${userId}/approve` : 
      `/admin/practice/users/${userId}/approve`;
      
    fetch(endpoint, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    }).then(() => {
      window.location.reload();
    });
  }
}

function holdUser(userId, system) {
  if(confirm('Ïù¥ ÏÇ¨Ïö©ÏûêÎ•º Î≥¥Î•òÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
    const endpoint = system === 'makeup' ? 
      `/admin/makeup/users/${userId}/hold` : 
      `/admin/practice/users/${userId}/hold`;
      
    fetch(endpoint, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    }).then(() => {
      window.location.reload();
    });
  }
}

function rejectUser(userId, system) {
  if(confirm('Ïù¥ ÏÇ¨Ïö©ÏûêÎ•º Í±∞Î∂Ä/ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå? Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.')) {
    const endpoint = system === 'makeup' ?
      `/admin/makeup/users/${userId}/reject` :
      `/admin/practice/users/${userId}/reject`;

    console.log('Rejecting user:', userId, 'System:', system, 'Endpoint:', endpoint);

    fetch(endpoint, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      console.log('Reject response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response;
    })
    .then(() => {
      alert('ÌöåÏõêÏù¥ Í±∞Î∂Ä/ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      window.location.reload();
    })
    .catch(error => {
      console.error('Reject error:', error);
      alert('Í±∞Î∂Ä/ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
    });
  }
}

function deleteUser(userId, system) {
  if(confirm('Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
    const endpoint = system === 'makeup' ?
      `/admin/makeup/users/${userId}/reject` :
      `/admin/practice/users/${userId}/reject`;

    console.log('Deleting user:', userId, 'System:', system, 'Endpoint:', endpoint);

    fetch(endpoint, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    })
    .then(response => {
      console.log('Delete response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response;
    })
    .then(() => {
      alert('ÌöåÏõêÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
      window.location.reload();
    })
    .catch(error => {
      console.error('Delete error:', error);
      alert('ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + error.message);
    });
  }
}

function resetPassword(userId, username, system) {
  const newPassword = prompt(`${username}Ïùò ÏÉà ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏµúÏÜå 6Ïûê):`);
  if (newPassword && newPassword.length >= 6) {
    const endpoint = system === 'makeup' ? 
      `/admin/makeup/users/${userId}/reset_password` : 
      `/admin/practice/users/${userId}/reset_password`;
      
    fetch(endpoint, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ password: newPassword })
    }).then(() => {
      alert('ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Ïû¨ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.');
    });
  } else if (newPassword) {
    alert('ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÏµúÏÜå 6Ïûê Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.');
  }
}

function changePage(page) {
  const urlParams = new URLSearchParams(window.location.search);
  urlParams.set('page', page);
  window.location.search = urlParams.toString();
}

function resetPenalty(userId, month, year, system) {
  if(confirm(`${month}Ïõî ÌéòÎÑêÌã∞Î•º Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) {
    const endpoint = system === 'makeup' ? 
      `/admin/makeup/penalties/reset` : 
      `/admin/penalties/reset`;
      
    fetch(endpoint, {
      method: 'POST',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        user_id: userId,
        month: month,
        year: year,
        system_type: system || 'practice'
      })
    }).then(response => {
      if(response.ok) {
        window.location.reload();
      } else {
        alert('ÌéòÎÑêÌã∞ Ï¥àÍ∏∞ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    });
  }
}
</script>