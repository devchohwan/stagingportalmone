<style>
  .payments-container {
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    border: 1px solid #e2e8f0;
    overflow: hidden;
    max-width: 100%;
  }

  .payments-content {
    padding: 25px;
    overflow-x: auto;
  }

  .payments-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
  }

  .payments-table-header {
    background: #f8fafc;
  }

  .payments-table-header th {
    padding: 15px 12px;
    text-align: left;
    font-weight: 600;
    font-size: 0.8rem;
    color: #4a5568;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border-bottom: 1px solid #e2e8f0;
  }

  .payments-table-header th:first-child {
    border-radius: 8px 0 0 0;
  }

  .payments-table-header th:last-child {
    border-radius: 0 8px 0 0;
  }

  .payment-row {
    transition: background-color 0.2s ease;
  }

  .payment-row:hover {
    background: #f8fafc;
  }

  .payment-row td {
    padding: 15px 12px;
    border-bottom: 1px solid #f1f5f9;
    font-size: 0.9rem;
  }

  .user-name-payment {
    font-weight: 600;
    color: #2d3748;
  }

  .payment-date {
    color: #4a5568;
  }

  .payment-date.overdue {
    color: #dc2626;
    font-weight: 600;
  }

  .payment-date.none {
    color: #9ca3af;
    font-style: italic;
  }

  .pagination-container {
    margin-top: 25px;
    display: flex;
    justify-content: center;
    gap: 8px;
  }

  .pagination-btn {
    padding: 8px 16px;
    border: 1px solid #e2e8f0;
    background: white;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.85rem;
    font-weight: 600;
    color: #4a5568;
    transition: all 0.3s ease;
  }

  .pagination-btn:hover:not(:disabled) {
    background: #667eea;
    color: white;
    border-color: #667eea;
  }

  .pagination-btn:disabled {
    opacity: 0.4;
    cursor: not-allowed;
  }

  .pagination-btn.active {
    background: #667eea;
    color: white;
    border-color: #667eea;
  }

  .empty-state-payment {
    text-align: center;
    padding: 60px 20px;
    color: #9ca3af;
  }

  .empty-state-icon-payment {
    font-size: 3rem;
    margin-bottom: 16px;
  }

  .empty-state-text-payment {
    font-size: 1.1rem;
    font-weight: 500;
  }

  .remaining-lessons {
    color: #2d3748;
    font-weight: 600;
  }

  .payment-amount-input {
    width: 100px;
    padding: 8px 12px;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: 0.85rem;
    transition: all 0.3s ease;
  }

  .payment-amount-input:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .payment-buttons {
    display: flex;
    gap: 6px;
  }

  .payment-period-btn {
    padding: 8px 14px;
    border: 1px solid #667eea;
    background: white;
    color: #667eea;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.8rem;
    font-weight: 600;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .payment-period-btn:hover {
    background: #667eea;
    color: white;
  }

  .subject-select {
    padding: 8px 12px;
    border: 1px solid #e2e8f0;
    border-radius: 6px;
    font-size: 0.85rem;
    background: white;
    cursor: pointer;
    transition: all 0.3s ease;
    min-width: 90px;
  }

  .subject-select:focus {
    outline: none;
    border-color: #667eea;
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  }

  .confirm-payment-btn {
    padding: 8px 16px;
    border: 1px solid #10b981;
    background: #10b981;
    color: white;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.8rem;
    font-weight: 600;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .confirm-payment-btn:hover {
    background: #059669;
    border-color: #059669;
  }

  .leave-status-btn {
    padding: 8px 16px;
    border: 1px solid #9ca3af;
    background: white;
    color: #4a5568;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.8rem;
    font-weight: 600;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .leave-status-btn:hover {
    background: #f3f4f6;
    border-color: #6b7280;
  }

  .leave-status-btn.on-leave {
    background: #fef3c7;
    border-color: #f59e0b;
    color: #d97706;
  }

  .leave-status-btn.on-leave:hover {
    background: #fde68a;
    border-color: #d97706;
  }

  /* 320px 모바일 최적화 */
  @media (max-width: 320px) {
    .payments-container {
      border-radius: 10px;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
    }

    .payments-content {
      padding: 16px;
      overflow-x: auto;
    }

    .payments-table {
      min-width: 500px;
      font-size: 0.8rem;
    }

    .payments-table-header th {
      padding: 10px 8px;
      font-size: 0.7rem;
    }

    .payment-row td {
      padding: 10px 8px;
      font-size: 0.8rem;
    }

    .user-name-payment {
      font-size: 0.85rem;
    }

    .pagination-btn {
      padding: 6px 12px;
      font-size: 0.75rem;
    }

    .empty-state-payment {
      padding: 40px 16px;
    }

    .empty-state-icon-payment {
      font-size: 2.5rem;
      margin-bottom: 12px;
    }

    .empty-state-text-payment {
      font-size: 0.95rem;
    }

    .payment-amount-input {
      width: 80px;
      padding: 6px 8px;
      font-size: 0.75rem;
    }

    .payment-period-btn {
      padding: 6px 10px;
      font-size: 0.7rem;
    }

    .subject-select {
      padding: 6px 8px;
      font-size: 0.75rem;
      min-width: 70px;
    }

    .confirm-payment-btn {
      padding: 6px 12px;
      font-size: 0.7rem;
    }
  }

  /* 결제 히스토리 모달 */
  .payment-history-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    justify-content: center;
    align-items: center;
  }

  .payment-history-modal.active {
    display: flex;
  }

  .payment-history-content {
    background: white;
    border-radius: 12px;
    padding: 30px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
  }

  .payment-history-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 15px;
    border-bottom: 2px solid #e2e8f0;
  }

  .payment-history-title {
    font-size: 1.3rem;
    font-weight: bold;
    color: #2d3748;
  }

  .payment-history-close {
    font-size: 1.5rem;
    color: #9ca3af;
    cursor: pointer;
    border: none;
    background: none;
    padding: 0;
    line-height: 1;
  }

  .payment-history-close:hover {
    color: #4a5568;
  }

  .payment-history-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .payment-history-item {
    background: #f8fafc;
    border-radius: 8px;
    padding: 15px;
    border-left: 4px solid #667eea;
  }

  .payment-history-date {
    font-size: 0.9rem;
    font-weight: 600;
    color: #667eea;
    margin-bottom: 8px;
  }

  .payment-history-details {
    display: flex;
    flex-direction: column;
    gap: 5px;
    font-size: 0.85rem;
    color: #4a5568;
  }

  .payment-history-detail-row {
    display: flex;
    justify-content: space-between;
  }

  .payment-history-label {
    font-weight: 600;
    color: #2d3748;
  }

  .payment-history-empty {
    text-align: center;
    padding: 40px 20px;
    color: #9ca3af;
  }
</style>

<!-- 결제 관리 모달 -->
<div id="payment-modal" class="payment-history-modal" onclick="closePaymentModal(event)" style="display: none;">
  <div class="payment-history-content" style="max-width: 800px;" onclick="event.stopPropagation()">
    <div class="payment-history-header">
      <h3 class="payment-history-title" id="payment-modal-user-name"></h3>
      <button class="payment-history-close" onclick="closePaymentModal()">&times;</button>
    </div>

    <!-- 수강 등록 목록 -->
    <div id="enrollment-list" style="margin-bottom: 20px;"></div>

    <!-- 새 과목 추가 버튼 -->
    <button onclick="addNewEnrollment()" style="margin-bottom: 20px; padding: 10px 16px; border: 1px solid #667eea; background: white; color: #667eea; border-radius: 6px; cursor: pointer; font-weight: 600;">+ 새 과목 추가</button>

    <!-- 결제 정보 섹션 -->
    <div id="payment-section" style="border: 2px solid #e2e8f0; border-radius: 8px; padding: 20px; background: #f8fafc;"></div>
  </div>
</div>

<!-- 새 과목 추가 모달 -->
<div id="add-enrollment-modal" class="payment-history-modal" onclick="closeAddEnrollmentModal(event)" style="display: none;">
  <div class="payment-history-content" style="max-width: 600px;" onclick="event.stopPropagation()">
    <div class="payment-history-header">
      <h3 class="payment-history-title">새 과목 추가</h3>
      <button class="payment-history-close" onclick="closeAddEnrollmentModal()">&times;</button>
    </div>

    <div style="padding: 20px;">
      <div style="margin-bottom: 16px;">
        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #2d3748;">담당 선생님</label>
        <select id="new-enrollment-teacher" style="width: 100%; padding: 10px; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 0.95rem;">
          <option value="">선택하세요</option>
          <option value="무성" data-subject="클린">무성 (클린)</option>
          <option value="성균" data-subject="클린">성균 (클린)</option>
          <option value="노네임" data-subject="클린">노네임 (클린)</option>
          <option value="로한" data-subject="클린">로한 (클린)</option>
          <option value="범석" data-subject="클린">범석 (클린)</option>
          <option value="두박" data-subject="클린">두박 (클린)</option>
          <option value="오또" data-subject="클린">오또 (클린)</option>
          <option value="지명" data-subject="믹싱">지명 (믹싱)</option>
          <option value="도현" data-subject="언클린">도현 (언클린)</option>
          <option value="온라인" data-subject="클린">온라인 (클린)</option>
        </select>
      </div>

      <div style="margin-bottom: 16px;">
        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #2d3748;">과목</label>
        <input type="text" id="new-enrollment-subject" readonly style="width: 100%; padding: 10px; border: 1px solid #e2e8f0; border-radius: 6px; background: #f8fafc; font-size: 0.95rem;" placeholder="선생님을 선택하면 자동으로 표시됩니다">
      </div>

      <div style="margin-bottom: 16px;">
        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #2d3748;">첫수업 날짜</label>
        <div id="new-enrollment-calendar"></div>
        <input type="hidden" id="new-enrollment-date">
      </div>

      <div id="new-enrollment-time-section" style="margin-bottom: 24px; display: none;">
        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #2d3748;">첫수업 시간</label>
        <div id="new-enrollment-time-slots" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(90px, 1fr)); gap: 8px;"></div>
        <input type="hidden" id="new-enrollment-time">
      </div>

      <div id="new-enrollment-duration-section" style="margin-bottom: 24px; display: none;">
        <label style="display: block; font-weight: 600; margin-bottom: 8px; color: #2d3748;">수강 기간</label>
        <div style="display: grid; grid-template-columns: repeat(3, 1fr); gap: 8px;">
          <button type="button" class="duration-btn" data-months="1" data-lessons="4" onclick="selectDuration(1, 4, this)" style="padding: 12px; border: 2px solid #e2e8f0; background: white; border-radius: 6px; cursor: pointer; font-size: 0.9rem; transition: all 0.2s;">
            <div style="font-weight: 600;">1개월</div>
            <div style="font-size: 0.8rem; color: #6b7280;">4회</div>
          </button>
          <button type="button" class="duration-btn" data-months="3" data-lessons="12" onclick="selectDuration(3, 12, this)" style="padding: 12px; border: 2px solid #e2e8f0; background: white; border-radius: 6px; cursor: pointer; font-size: 0.9rem; transition: all 0.2s;">
            <div style="font-weight: 600;">3개월</div>
            <div style="font-size: 0.8rem; color: #6b7280;">12회</div>
          </button>
          <button type="button" class="duration-btn" data-months="4" data-lessons="16" onclick="selectDuration(4, 16, this)" style="padding: 12px; border: 2px solid #e2e8f0; background: white; border-radius: 6px; cursor: pointer; font-size: 0.9rem; transition: all 0.2s;">
            <div style="font-weight: 600;">4개월 (믹싱)</div>
            <div style="font-size: 0.8rem; color: #6b7280;">16회</div>
          </button>
        </div>
        <input type="hidden" id="new-enrollment-months">
        <input type="hidden" id="new-enrollment-lessons">
      </div>

      <div id="new-enrollment-summary" style="margin-bottom: 24px; display: none; padding: 16px; background: #f8fafc; border-radius: 8px; border: 1px solid #e2e8f0;">
        <div style="font-weight: 600; margin-bottom: 12px; color: #2d3748;">수강 정보 요약</div>
        <div style="display: grid; gap: 8px; font-size: 0.9rem;">
          <div style="display: flex; justify-content: space-between;">
            <span style="color: #6b7280;">담당 선생님</span>
            <span id="summary-teacher" style="font-weight: 600;"></span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: #6b7280;">과목</span>
            <span id="summary-subject" style="font-weight: 600;"></span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: #6b7280;">요일/시간</span>
            <span id="summary-schedule" style="font-weight: 600;"></span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: #6b7280;">첫수업 날짜</span>
            <span id="summary-first-lesson" style="font-weight: 600;"></span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: #6b7280;">종료일</span>
            <span id="summary-end-date" style="font-weight: 600;"></span>
          </div>
          <div style="display: flex; justify-content: space-between;">
            <span style="color: #6b7280;">남은 수업</span>
            <span id="summary-lessons" style="font-weight: 600; color: #667eea;"></span>
          </div>
        </div>
      </div>

      <div style="display: flex; gap: 10px;">
        <button onclick="closeAddEnrollmentModal()" style="flex: 1; padding: 12px; border: 1px solid #e2e8f0; background: white; color: #4a5568; border-radius: 6px; cursor: pointer; font-weight: 600;">취소</button>
        <button onclick="saveNewEnrollment()" style="flex: 1; padding: 12px; border: none; background: #667eea; color: white; border-radius: 6px; cursor: pointer; font-weight: 600;">추가</button>
      </div>
    </div>
  </div>
</div>

<!-- 결제 히스토리 모달 -->
<div id="payment-history-modal" class="payment-history-modal" onclick="closePaymentHistoryModal(event)">
  <div class="payment-history-content" onclick="event.stopPropagation()">
    <div class="payment-history-header">
      <h3 class="payment-history-title" id="payment-history-user-name"></h3>
      <button class="payment-history-close" onclick="closePaymentHistoryModal()">&times;</button>
    </div>
    <div id="payment-history-list" class="payment-history-list"></div>
  </div>
</div>

<!-- 과목별 휴원 관리 모달 -->
<div id="enrollment-manage-modal" class="payment-history-modal" onclick="closeEnrollmentManageModal(event)">
  <div class="payment-history-content" style="max-width: 500px;" onclick="event.stopPropagation()">
    <div class="payment-history-header">
      <h3 class="payment-history-title">과목별 휴원 관리</h3>
      <button class="payment-history-close" onclick="closeEnrollmentManageModal()">&times;</button>
    </div>
    <div id="enrollment-manage-list" style="padding: 20px;"></div>
  </div>
</div>

<!-- 시간표 선택 모달 (휴원 해제용) -->
<div id="schedule-select-modal" class="payment-history-modal" onclick="closeScheduleSelectModal(event)" style="display: none;">
  <div class="payment-history-content" style="max-width: 1100px;" onclick="event.stopPropagation()">
    <div class="payment-history-header">
      <h3 class="payment-history-title">복귀할 시간대 선택</h3>
      <button class="payment-history-close" onclick="closeScheduleSelectModal()">&times;</button>
    </div>
    <div style="padding: 20px;">
      <!-- 선생님 선택 탭 -->
      <div id="teacher-tabs" style="display: flex; gap: 8px; margin-bottom: 20px; border-bottom: 2px solid #e5e7eb;"></div>

      <!-- 캘린더 -->
      <div style="margin-bottom: 20px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
          <button onclick="changeScheduleMonth(-1)" style="padding: 8px 16px; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer;">◀ 이전</button>
          <h4 id="schedule-calendar-month" style="margin: 0; font-size: 1.1rem; font-weight: 600;"></h4>
          <button onclick="changeScheduleMonth(1)" style="padding: 8px 16px; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer;">다음 ▶</button>
        </div>
        <div id="schedule-calendar-content"></div>
      </div>

      <!-- 선택된 날짜 정보 -->
      <div id="selected-date-info" style="margin-bottom: 15px; padding: 12px; background: #f0f9ff; border: 1px solid #bae6fd; border-radius: 6px; display: none;">
        <p style="margin: 0; color: #0c4a6e; font-weight: 600;"></p>
      </div>

      <!-- 시간표 -->
      <div id="schedule-select-content"></div>
    </div>
  </div>
</div>

<!-- 결제일 회원 목록 모달 -->
<div id="payment-date-modal" class="payment-history-modal" onclick="closePaymentDateModal(event)">
  <div class="payment-history-content" style="max-width: 700px;" onclick="event.stopPropagation()">
    <div class="payment-history-header">
      <h3 class="payment-history-title" id="payment-date-modal-title"></h3>
      <button class="payment-history-close" onclick="closePaymentDateModal()">&times;</button>
    </div>
    <div style="padding: 20px;">
      <div style="display: flex; gap: 10px; margin-bottom: 20px;">
        <label style="display: flex; align-items: center; gap: 5px; cursor: pointer;">
          <input type="checkbox" id="select-all-payments" onclick="toggleAllPaymentCheckboxes()" style="width: 16px; height: 16px; cursor: pointer;">
          <span style="font-weight: 600;">전체선택</span>
        </label>
        <button onclick="markSelectedAsPaid()" style="padding: 8px 16px; background: #10b981; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">선택항목 결제완료 처리</button>
      </div>
      <div id="payment-date-list" style="display: flex; flex-direction: column; gap: 15px;"></div>
    </div>
  </div>
</div>

<!-- 결제 캘린더 -->
<div style="background: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05); border: 1px solid #e2e8f0; padding: 25px; margin-bottom: 25px;">
  <h3 style="font-size: 1.2rem; font-weight: 700; margin-bottom: 20px; color: #2d3748;">결제 캘린더</h3>

  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
    <button onclick="changeCalendarMonth(-1)" style="padding: 8px 16px; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">◀ 이전</button>
    <h4 id="calendar-month-title" style="margin: 0; font-size: 1.1rem; font-weight: 600; color: #2d3748;"></h4>
    <button onclick="changeCalendarMonth(1)" style="padding: 8px 16px; background: #667eea; color: white; border: none; border-radius: 6px; cursor: pointer; font-weight: 600;">다음 ▶</button>
  </div>

  <div id="payment-calendar-content"></div>

  <!-- 오늘 결제 예정자 요약 -->
  <div id="today-payments-summary" style="margin-top: 15px; padding: 15px; background: #fef3c7; border: 2px solid #f59e0b; border-radius: 8px; display: none;">
    <div style="font-weight: 700; font-size: 1rem; color: #d97706; margin-bottom: 8px;">📅 오늘 결제 예정</div>
    <div id="today-payments-list" style="font-size: 0.9rem; color: #92400e;"></div>
  </div>
</div>

<div class="payments-container">
  <div class="payments-content">
    <% if @users.empty? %>
      <div class="empty-state-payment">
        <div class="empty-state-icon-payment">💳</div>
        <div class="empty-state-text-payment">
          <%= params[:search].present? ? '검색 결과가 없습니다.' : '회원이 없습니다.' %>
        </div>
      </div>
    <% else %>
      <table class="payments-table">
        <thead class="payments-table-header">
          <tr>
            <th>이름</th>
            <th>담당 선생님</th>
            <th>상태</th>
            <th>휴원</th>
            <th>마지막 결제일</th>
            <th>첫수업일</th>
            <th>다음 결제 예정일</th>
            <th>액션</th>
          </tr>
        </thead>
        <tbody>
          <% @users.each do |user| %>
            <%
              # 사용자의 결제 완료된 등록 과목만 가져오기
              enrollments = UserEnrollment.where(user_id: user['id'], is_paid: true)
              teachers = enrollments.map(&:teacher).uniq.join(', ')
              teachers = user['teacher'] if teachers.blank?

              # 상태 표시
              status_text = case user['status']
              when 'on_leave' then '휴원'
              when 'active', 'approved' then '활성'
              else '대기'
              end

              status_color = case user['status']
              when 'on_leave' then '#f59e0b'
              when 'active', 'approved' then '#10b981'
              else '#9ca3af'
              end
            %>
            <tr class="payment-row" data-user-id="<%= user['id'] %>">
              <td>
                <span class="user-name-payment" style="cursor: pointer; text-decoration: underline; color: #667eea; font-weight: 600;" onclick="openPaymentModal(<%= user['id'] %>)">
                  <%= user['name'] %>
                </span>
              </td>
              <td><%= teachers %></td>
              <td>
                <span style="padding: 4px 12px; border-radius: 12px; font-size: 0.85rem; font-weight: 600; background: <%= status_color %>20; color: <%= status_color %>;">
                  <%= status_text %>
                </span>
              </td>
              <td>
                <% if enrollments.any? %>
                  <% on_leave_subjects = enrollments.select { |e| e.status == 'on_leave' }.map(&:subject) %>

                  <button onclick="openEnrollmentModal(<%= user['id'] %>)"
                          style="padding: 6px 12px; background: #667eea; color: white; border: none; border-radius: 4px; font-weight: 600; cursor: pointer; font-size: 0.85rem;">
                    과목별 관리
                  </button>

                  <% on_leave_subjects.each do |subject| %>
                    <span style="display: inline-block; margin-left: 8px; padding: 4px 8px; background: #fef3c7; color: #f59e0b; border: 1px solid #fbbf24; border-radius: 4px; font-size: 0.75rem; font-weight: 600;">
                      <%= subject %>
                    </span>
                  <% end %>

                  <!-- 모달용 데이터 저장 -->
                  <div id="enrollment-data-<%= user['id'] %>" style="display: none;">
                    <% enrollments.each do |enrollment| %>
                      <div class="enrollment-item"
                           data-id="<%= enrollment.id %>"
                           data-subject="<%= enrollment.subject %>"
                           data-teacher="<%= enrollment.teacher %>"
                           data-day="<%= enrollment.day_korean %>"
                           data-time="<%= enrollment.time_slot %>"
                           data-status="<%= enrollment.status %>">
                      </div>
                    <% end %>
                  </div>
                <% else %>
                  <span style="color: #9ca3af;">-</span>
                <% end %>
              </td>
              <td>
                <% if user['last_payment_date'].present? %>
                  <% payment_date = user['last_payment_date'].is_a?(Date) ? user['last_payment_date'] : Date.parse(user['last_payment_date']) %>
                  <% days_ago = (Date.current - payment_date).to_i %>
                  <% is_overdue = days_ago > 30 %>
                  <span class="payment-date <%= is_overdue ? 'overdue' : '' %>">
                    <%= payment_date.strftime('%Y.%m.%d') %>
                    <% if is_overdue %>
                      <span style="font-size: 0.8rem; color: #ef4444;">(<%= days_ago %>일 전)</span>
                    <% end %>
                  </span>
                <% else %>
                  <span class="payment-date none">-</span>
                <% end %>
              </td>
              <td>
                <%
                  # 첫수업일 (가장 빠른 것)
                  first_lesson_dates = enrollments.map(&:first_lesson_date).compact
                  earliest_first_lesson = first_lesson_dates.min
                %>
                <% if earliest_first_lesson.present? %>
                  <span class="payment-date">
                    <%= earliest_first_lesson.strftime('%Y.%m.%d') %>
                  </span>
                <% else %>
                  <span class="payment-date none">-</span>
                <% end %>
              </td>
              <td>
                <%
                  # 활성 과목과 휴원 과목 분리
                  active_enrollments = enrollments.select { |e| e.status == 'active' }
                  all_on_leave = enrollments.all? { |e| e.status == 'on_leave' }

                  # 활성 과목의 다음 결제 예정일만 계산
                  active_next_payment_dates = active_enrollments.map { |e| e.next_payment_date }.compact
                  earliest_next_payment = active_next_payment_dates.min
                %>
                <% if all_on_leave && enrollments.any? %>
                  <span style="padding: 4px 12px; border-radius: 12px; font-size: 0.85rem; font-weight: 600; background: #f59e0b20; color: #f59e0b;">
                    휴원
                  </span>
                <% elsif earliest_next_payment.present? %>
                  <% days_until = (earliest_next_payment - Date.current).to_i %>
                  <% is_soon = days_until <= 7 && days_until >= 0 %>
                  <% is_today = days_until == 0 %>
                  <% is_overdue = days_until < 0 %>
                  <span class="payment-date <%= is_overdue ? 'overdue' : '' %>" style="<%= is_today ? 'background: #fef3c7; padding: 4px 8px; border-radius: 4px; font-weight: 700; color: #d97706;' : is_soon ? 'color: #f59e0b; font-weight: 600;' : '' %>">
                    <%= earliest_next_payment.strftime('%Y.%m.%d') %>
                    <% if is_today %>
                      <span style="font-size: 0.8rem;">(오늘)</span>
                    <% elsif is_soon && !is_overdue %>
                      <span style="font-size: 0.8rem;">(D-<%= days_until %>)</span>
                    <% elsif is_overdue %>
                      <span style="font-size: 0.8rem; color: #ef4444;">(+<%= -days_until %>일)</span>
                    <% end %>
                  </span>
                <% else %>
                  <span class="payment-date none">-</span>
                <% end %>
              </td>
              <td>
                <button onclick="showPaymentHistory(<%= user['id'] %>)" style="padding: 8px 16px; background: #667eea; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; font-size: 0.9rem; transition: all 0.2s;">
                  결제 내역 보기
                </button>
              </td>
            </tr>
          <% end %>
        </tbody>
      </table>

      <% if @total_pages > 1 %>
        <div class="pagination-container">
          <button class="pagination-btn" onclick="loadPaymentsTab(<%= [@page - 1, 1].max %>)" <%= 'disabled' if @page == 1 %>>
            이전
          </button>

          <% start_page = [@page - 2, 1].max %>
          <% end_page = [start_page + 4, @total_pages].min %>
          <% start_page = [end_page - 4, 1].max if end_page - start_page < 4 %>

          <% (start_page..end_page).each do |page_num| %>
            <button class="pagination-btn <%= 'active' if page_num == @page %>" onclick="loadPaymentsTab(<%= page_num %>)">
              <%= page_num %>
            </button>
          <% end %>

          <button class="pagination-btn" onclick="loadPaymentsTab(<%= [@page + 1, @total_pages].min %>)" <%= 'disabled' if @page == @total_pages %>>
            다음
          </button>
        </div>
      <% end %>
    <% end %>
  </div>
</div>

<script>
(function() {
  // 과목별 가격 정보
  const SUBJECT_PRICES = {
    '클린': { 1: 370000, 3: 950000 },
    '언클린': { 1: 370000, 3: 950000 },
    '믹싱': { 1: 280000, 4: 990000 },
    '작곡': { 1: 350000, 3: 950000 },
    '기타': { 1: 300000, 3: 770000 }
  };

  // 할인 정보
  const DISCOUNTS = {
    'text_review': 30000,
    'video_review': 30000,
    'referral': 50000,
    'bundle_2': 50000,
    'bundle_3': 100000
  };

  // 선생님 휴무일 데이터
  const TEACHER_HOLIDAYS = <%= raw @teacher_holidays.to_json %>;

  let currentUserId = null;
  let currentUserName = null;
  let enrollments = []; // 추가할 과목 목록
  let selectedTeacher = null; // 현재 선택된 선생님

  // 결제 모달 열기
  window.openPaymentModal = function(userId) {
    // 다른 모달들 먼저 닫기
    closePaymentDateModal();

    fetch(`/admin/users/${userId}`)
      .then(response => response.json())
      .then(data => {
        currentUserId = userId;
        currentUserName = data.name;
        enrollments = [];

        // 연장 모드 플래그 초기화 (신규 등록 모드)
        window.extendingEnrollmentId = null;
        window.extendingUserId = null;

        document.getElementById('payment-modal-user-name').textContent = data.name + ' - 결제 등록';
        document.getElementById('enrollment-list').innerHTML = '';
        document.getElementById('payment-section').innerHTML = '';
        document.getElementById('payment-modal').style.display = 'flex';
      })
      .catch(error => {
        console.error('Error:', error);
        alert('회원 정보를 불러오는데 실패했습니다.');
      });
  };

  // 결제 모달 닫기
  window.closePaymentModal = function(event) {
    if (!event || event.target.id === 'payment-modal') {
      document.getElementById('payment-modal').style.display = 'none';
      enrollments = [];
    }
  };

  // 새 과목 추가 모달 열기
  window.addNewEnrollment = function() {
    document.getElementById('add-enrollment-modal').style.display = 'flex';
    initializeEnrollmentForm();
  };

  // 새 과목 추가 모달 닫기
  window.closeAddEnrollmentModal = function(event) {
    if (!event || event.target.id === 'add-enrollment-modal') {
      document.getElementById('add-enrollment-modal').style.display = 'none';
    }
  };

  // 과목 추가 폼 초기화
  function initializeEnrollmentForm() {
    // 선생님 선택 시 과목 자동 입력
    document.getElementById('new-enrollment-teacher').addEventListener('change', function() {
      const selectedOption = this.options[this.selectedIndex];
      const subject = selectedOption.getAttribute('data-subject');
      selectedTeacher = this.value; // 선택된 선생님 저장
      document.getElementById('new-enrollment-subject').value = subject || '';

      if (subject) {
        showCalendar();
      }
    });

    // 폼 리셋
    document.getElementById('new-enrollment-teacher').value = '';
    document.getElementById('new-enrollment-subject').value = '';
    document.getElementById('new-enrollment-date').value = '';
    document.getElementById('new-enrollment-time').value = '';
    document.getElementById('new-enrollment-months').value = '';
    document.getElementById('new-enrollment-lessons').value = '';
    document.getElementById('new-enrollment-time-section').style.display = 'none';
    document.getElementById('new-enrollment-duration-section').style.display = 'none';
    document.getElementById('new-enrollment-summary').style.display = 'none';
  }

  // 달력 표시
  function showCalendar() {
    const calendarDiv = document.getElementById('new-enrollment-calendar');
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth();

    // 선택된 선생님의 휴무일 가져오기 (0=일, 1=월, 2=화, 3=수, 4=목, 5=금, 6=토)
    const teacherHolidays = selectedTeacher ? (TEACHER_HOLIDAYS[selectedTeacher] || []) : [];

    let html = '<div style="text-align: center; margin-bottom: 10px; font-weight: 600;">';
    html += year + '년 ' + (month + 1) + '월</div>';
    html += '<div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 4px;">';

    const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
    dayNames.forEach(day => {
      html += '<div style="text-align: center; font-weight: 600; padding: 8px; font-size: 0.85rem;">' + day + '</div>';
    });

    const firstDay = new Date(year, month, 1).getDay();
    const lastDate = new Date(year, month + 1, 0).getDate();

    for (let i = 0; i < firstDay; i++) {
      html += '<div></div>';
    }

    for (let date = 1; date <= lastDate; date++) {
      const fullDate = new Date(year, month, date);
      const dateStr = year + '-' + String(month + 1).padStart(2, '0') + '-' + String(date).padStart(2, '0');
      const dayOfWeek = fullDate.getDay(); // 0=일, 1=월, ..., 6=토
      const isHoliday = teacherHolidays.includes(dayOfWeek);

      let style = 'text-align: center; padding: 10px; border: 1px solid #e2e8f0; border-radius: 4px;';

      if (isHoliday) {
        // 휴무일은 선택 불가
        style += ' opacity: 0.5; pointer-events: none; cursor: not-allowed;';
        style += ' background: #fef3c7;'; // 연노랑
      } else {
        style += ' cursor: pointer;';
      }

      const onclick = isHoliday ? '' : 'onclick="selectDate(\'' + dateStr + '\')"';

      html += '<div ' + onclick + ' style="' + style + '" data-date="' + dateStr + '">' + date + '</div>';
    }

    html += '</div>';
    calendarDiv.innerHTML = html;
  }

  // 날짜 선택
  window.selectDate = function(dateStr) {
    document.getElementById('new-enrollment-date').value = dateStr;

    // 선택된 날짜 표시
    document.querySelectorAll('[data-date]').forEach(el => {
      el.style.background = '';
      el.style.color = '';
    });
    document.querySelector('[data-date="' + dateStr + '"]').style.background = '#667eea';
    document.querySelector('[data-date="' + dateStr + '"]').style.color = 'white';

    showTimeSlots(dateStr);
  };

  // 시간대 표시
  function showTimeSlots(dateStr) {
    const parts = dateStr.split('-');
    const date = new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
    const dayOfWeek = date.getDay();
    const dayKeys = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
    const dayKey = dayKeys[dayOfWeek];

    document.getElementById('new-enrollment-time-section').style.display = 'block';

    // 로딩 표시
    document.getElementById('new-enrollment-time-slots').innerHTML = '<div style="text-align: center; padding: 20px; color: #9ca3af;">시간표 불러오는 중...</div>';

    // 선택된 날짜가 속한 주의 week_offset 계산
    const selectedDate = new Date(parseInt(parts[0]), parseInt(parts[1]) - 1, parseInt(parts[2]));
    const today = new Date();
    const todaySunday = new Date(today);
    todaySunday.setDate(today.getDate() - today.getDay()); // 이번 주 일요일
    const selectedSunday = new Date(selectedDate);
    selectedSunday.setDate(selectedDate.getDate() - selectedDate.getDay()); // 선택된 날짜의 일요일

    const weekOffset = Math.round((selectedSunday - todaySunday) / (7 * 24 * 60 * 60 * 1000));

    // 휴원 복귀와 동일한 API 사용 (주 단위 시간표)
    fetch(`/admin/load_schedule?teacher=${encodeURIComponent(selectedTeacher)}&week_offset=${weekOffset}&mode=manager`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const scheduleData = data.schedules[dayKey] || {};
          const timeSlots = ['13-14', '14-15', '15-16', '16-17', '17-18', '19-20', '20-21', '21-22'];
          let html = '';

          timeSlots.forEach(slot => {
            const students = scheduleData[slot] || [];
            const currentCount = students.length;
            const isFull = currentCount >= 3;

            let btnStyle = 'padding: 20px; border-radius: 8px; text-align: center; border: 2px solid; transition: all 0.2s; display: flex; flex-direction: column; align-items: center; gap: 8px;';
            let bgColor, borderColor, textColor, cursor;

            if (isFull) {
              bgColor = '#fee2e2'; // 연붉은색 (꽉 참 - 선택 불가)
              borderColor = '#fecaca';
              textColor = '#dc2626';
              cursor = 'not-allowed';
            } else {
              bgColor = '#dbeafe'; // 연파랑 (선택 가능)
              borderColor = '#93c5fd';
              textColor = '#1e40af';
              cursor = 'pointer';
            }

            btnStyle += ` background: ${bgColor}; border-color: ${borderColor}; color: ${textColor}; cursor: ${cursor};`;

            if (isFull) {
              // 3명 이상이면 클릭 불가
              html += '<button type="button" class="time-slot-btn" data-time="' + slot + '" style="' + btnStyle + '" disabled>';
            } else {
              html += '<button type="button" onclick="selectTime(\'' + slot + '\')" class="time-slot-btn" data-time="' + slot + '" style="' + btnStyle + '">';
            }

            html += '<div style="font-size: 1.1rem; font-weight: 600;">' + slot.replace('-', ':00-') + ':00</div>';
            html += '<div style="font-size: 0.9rem;">' + currentCount + '/3</div>';

            if (!isFull) {
              html += '<div style="font-size: 0.8rem; color: #10b981;">선택 가능</div>';
            } else {
              html += '<div style="font-size: 0.8rem;">자리 없음</div>';
            }

            html += '</button>';
          });

          document.getElementById('new-enrollment-time-slots').innerHTML = html;
        } else {
          document.getElementById('new-enrollment-time-slots').innerHTML = '<div style="text-align: center; padding: 20px; color: #ef4444;">시간표를 불러오는데 실패했습니다.</div>';
        }
      })
      .catch(error => {
        console.error('Error:', error);
        document.getElementById('new-enrollment-time-slots').innerHTML = '<div style="text-align: center; padding: 20px; color: #ef4444;">시간표를 불러오는데 실패했습니다.</div>';
      });
  }

  // 시간 선택
  window.selectTime = function(timeSlot) {
    document.getElementById('new-enrollment-time').value = timeSlot;

    // 선택된 시간 표시
    document.querySelectorAll('.time-slot-btn').forEach(btn => {
      // 원래 색상으로 복원 (data-time 속성 기반으로 복원은 복잡하므로, 선택된 것만 변경)
      btn.style.opacity = '0.7';
      btn.style.transform = 'scale(0.95)';
    });
    const selectedBtn = document.querySelector('[data-time="' + timeSlot + '"]');
    selectedBtn.style.opacity = '1';
    selectedBtn.style.transform = 'scale(1.05)';
    selectedBtn.style.boxShadow = '0 4px 12px rgba(102, 126, 234, 0.4)';

    showDurationOptions();
  };

  // 수강 기간 옵션 표시
  function showDurationOptions() {
    const subject = document.getElementById('new-enrollment-subject').value;
    document.getElementById('new-enrollment-duration-section').style.display = 'block';

    // 과목에 따라 가능한 기간만 활성화
    const availableMonths = Object.keys(SUBJECT_PRICES[subject] || {});
    document.querySelectorAll('.duration-btn').forEach(btn => {
      const months = btn.getAttribute('data-months');
      if (availableMonths.includes(months)) {
        btn.disabled = false;
        btn.style.opacity = '1';
      } else {
        btn.disabled = true;
        btn.style.opacity = '0.3';
      }
    });
  }

  // 수강 기간 선택
  window.selectDuration = function(months, lessons, element) {
    document.getElementById('new-enrollment-months').value = months;
    document.getElementById('new-enrollment-lessons').value = lessons;

    // 선택된 기간 표시
    document.querySelectorAll('.duration-btn').forEach(btn => {
      btn.style.borderColor = '#e2e8f0';
      btn.style.background = 'white';
    });
    element.style.borderColor = '#667eea';
    element.style.background = '#f0f4ff';

    updateSummary();
  };

  // 요약 정보 업데이트
  function updateSummary() {
    const teacher = document.getElementById('new-enrollment-teacher').value;
    const subject = document.getElementById('new-enrollment-subject').value;
    const dateStr = document.getElementById('new-enrollment-date').value;
    const timeSlot = document.getElementById('new-enrollment-time').value;
    const months = parseInt(document.getElementById('new-enrollment-months').value);
    const lessons = parseInt(document.getElementById('new-enrollment-lessons').value);

    if (!teacher || !subject || !dateStr || !timeSlot || !months) return;

    const parts = dateStr.split('-');
    const year = parseInt(parts[0]);
    const month = parseInt(parts[1]) - 1;
    const day = parseInt(parts[2]);
    const date = new Date(year, month, day);
    const dayOfWeek = ['일', '월', '화', '수', '목', '금', '토'][date.getDay()];

    // 종료일 계산
    const endDate = new Date(year, month + months, day);
    const endDateStr = endDate.getFullYear() + '-' +
                       String(endDate.getMonth() + 1).padStart(2, '0') + '-' +
                       String(endDate.getDate()).padStart(2, '0');

    document.getElementById('summary-teacher').textContent = teacher;
    document.getElementById('summary-subject').textContent = subject;
    document.getElementById('summary-schedule').textContent = dayOfWeek + '요일 ' + timeSlot.replace('-', ':00-') + ':00';
    document.getElementById('summary-first-lesson').textContent = dateStr;
    document.getElementById('summary-end-date').textContent = endDateStr;
    document.getElementById('summary-lessons').textContent = lessons + '회';

    document.getElementById('new-enrollment-summary').style.display = 'block';
  }

  // 새 과목 저장
  window.saveNewEnrollment = function() {
    const teacher = document.getElementById('new-enrollment-teacher').value;
    const subject = document.getElementById('new-enrollment-subject').value;
    const dateStr = document.getElementById('new-enrollment-date').value;
    const timeSlot = document.getElementById('new-enrollment-time').value;
    const months = parseInt(document.getElementById('new-enrollment-months').value);
    const lessons = parseInt(document.getElementById('new-enrollment-lessons').value);

    if (!teacher || !subject || !dateStr || !timeSlot || !months) {
      alert('모든 정보를 입력해주세요.');
      return;
    }

    const parts = dateStr.split('-');
    const year = parseInt(parts[0]);
    const month = parseInt(parts[1]) - 1;
    const day = parseInt(parts[2]);
    const date = new Date(year, month, day);
    const dayOfWeek = date.getDay(); // 0=일, 1=월, ...

    // 종료일 계산
    const endDate = new Date(year, month + months, day);
    const endDateStr = endDate.getFullYear() + '-' +
                       String(endDate.getMonth() + 1).padStart(2, '0') + '-' +
                       String(endDate.getDate()).padStart(2, '0');

    enrollments.push({
      teacher: teacher,
      subject: subject,
      first_lesson_date: dateStr,
      time_slot: timeSlot,
      day_of_week: dayOfWeek,
      months: months,
      lessons: lessons,
      end_date: endDateStr,
      price: SUBJECT_PRICES[subject][months]
    });

    closeAddEnrollmentModal();
    updateEnrollmentList();
    updatePaymentSection();
  };

  // 등록 과목 목록 업데이트
  function updateEnrollmentList() {
    const listDiv = document.getElementById('enrollment-list');
    if (enrollments.length === 0) {
      listDiv.innerHTML = '';
      return;
    }

    let html = '<div style="margin-bottom: 20px;"><h4 style="font-weight: 600; margin-bottom: 10px;">등록할 과목</h4>';
    enrollments.forEach((enroll, index) => {
      const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
      html += '<div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin-bottom: 10px; border: 1px solid #e2e8f0;">';
      html += '<div style="display: flex; justify-content: space-between; align-items: start;">';
      html += '<div>';
      html += '<div style="font-weight: 600; margin-bottom: 5px;">' + enroll.subject + ' - ' + enroll.teacher + '</div>';
      html += '<div style="font-size: 0.85rem; color: #6b7280;">' + dayNames[enroll.day_of_week] + '요일 ' + enroll.time_slot.replace('-', ':00-') + ':00</div>';
      html += '<div style="font-size: 0.85rem; color: #6b7280;">첫수업: ' + enroll.first_lesson_date + ' | 종료: ' + enroll.end_date + '</div>';
      html += '<div style="font-size: 0.85rem; color: #667eea; font-weight: 600; margin-top: 5px;">' + enroll.price.toLocaleString() + '원 (' + enroll.months + '개월/' + enroll.lessons + '회)</div>';
      html += '</div>';
      html += '<button onclick="removeEnrollment(' + index + ')" style="padding: 6px 12px; background: #ef4444; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 0.85rem;">삭제</button>';
      html += '</div></div>';
    });
    html += '</div>';

    listDiv.innerHTML = html;
  }

  // 과목 삭제
  window.removeEnrollment = function(index) {
    enrollments.splice(index, 1);
    updateEnrollmentList();
    updatePaymentSection();
  };

  // 결제 섹션 업데이트
  function updatePaymentSection() {
    if (enrollments.length === 0) {
      document.getElementById('payment-section').innerHTML = '';
      return;
    }

    const totalPrice = enrollments.reduce((sum, e) => sum + e.price, 0);

    let html = '<h4 style="font-weight: 600; margin-bottom: 15px;">결제 정보</h4>';

    // 할인 선택
    html += '<div style="margin-bottom: 20px;">';
    html += '<div style="font-weight: 600; margin-bottom: 10px;">할인 적용</div>';
    html += '<div style="display: flex; flex-wrap: wrap; gap: 10px;">';
    html += '<label style="display: flex; align-items: center; gap: 5px; cursor: pointer;"><input type="checkbox" class="discount-checkbox" data-discount="text_review" value="30000"> 글 후기 (-3만원)</label>';
    html += '<label style="display: flex; align-items: center; gap: 5px; cursor: pointer;"><input type="checkbox" class="discount-checkbox" data-discount="video_review" value="30000"> 영상 후기 (-3만원)</label>';
    html += '<label style="display: flex; align-items: center; gap: 5px; cursor: pointer;"><input type="checkbox" class="discount-checkbox" data-discount="referral" value="50000"> 친구 추천 (-5만원)</label>';
    if (enrollments.length >= 2) {
      html += '<label style="display: flex; align-items: center; gap: 5px; cursor: pointer;"><input type="checkbox" class="discount-checkbox" data-discount="bundle_2" value="50000"> 2과목 묶음 (-5만원)</label>';
    }
    if (enrollments.length >= 3) {
      html += '<label style="display: flex; align-items: center; gap: 5px; cursor: pointer;"><input type="checkbox" class="discount-checkbox" data-discount="bundle_3" value="100000"> 3과목 묶음 (-10만원)</label>';
    }
    html += '</div></div>';

    // 결제일 (한국 시간 기준)
    const today = new Date();
    const koreaOffset = 9 * 60; // UTC+9
    const koreaTime = new Date(today.getTime() + (koreaOffset * 60 * 1000));
    const todayStr = koreaTime.toISOString().split('T')[0];

    html += '<div style="margin-bottom: 20px;">';
    html += '<label style="display: block; font-weight: 600; margin-bottom: 8px;">결제일</label>';
    html += '<input type="date" id="payment-date" value="' + todayStr + '" style="width: 100%; padding: 10px; border: 1px solid #e2e8f0; border-radius: 6px;">';
    html += '</div>';

    // 금액 요약
    html += '<div id="payment-summary" style="background: white; padding: 15px; border-radius: 8px; border: 2px solid #667eea;">';
    html += '<div style="display: flex; justify-content: space-between; margin-bottom: 8px;"><span>기본 금액</span><span id="base-price">' + totalPrice.toLocaleString() + '원</span></div>';
    html += '<div style="display: flex; justify-content: space-between; margin-bottom: 8px; color: #ef4444;"><span>할인</span><span id="discount-price">0원</span></div>';
    html += '<div style="display: flex; justify-content: space-between; font-weight: 700; font-size: 1.1rem; padding-top: 10px; border-top: 2px solid #e2e8f0;"><span>최종 금액</span><span id="final-price" style="color: #667eea;">' + totalPrice.toLocaleString() + '원</span></div>';
    html += '</div>';

    // 결제 버튼
    html += '<button onclick="processPayment()" style="width: 100%; margin-top: 20px; padding: 15px; background: #10b981; color: white; border: none; border-radius: 8px; font-weight: 700; font-size: 1.1rem; cursor: pointer;">결제 완료</button>';

    document.getElementById('payment-section').innerHTML = html;

    // 할인 체크박스 이벤트
    document.querySelectorAll('.discount-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', calculateFinalPrice);
    });
  }

  // 최종 금액 계산
  function calculateFinalPrice() {
    const totalPrice = enrollments.reduce((sum, e) => sum + e.price, 0);
    let totalDiscount = 0;

    document.querySelectorAll('.discount-checkbox:checked').forEach(checkbox => {
      totalDiscount += parseInt(checkbox.value);
    });

    const finalPrice = Math.max(0, totalPrice - totalDiscount);

    document.getElementById('base-price').textContent = totalPrice.toLocaleString() + '원';
    document.getElementById('discount-price').textContent = '-' + totalDiscount.toLocaleString() + '원';
    document.getElementById('final-price').textContent = finalPrice.toLocaleString() + '원';
  }

  // 결제 처리
  window.processPayment = function() {
    if (enrollments.length === 0) {
      alert('등록할 과목을 추가해주세요.');
      return;
    }

    const paymentDate = document.getElementById('payment-date').value;
    if (!paymentDate) {
      alert('결제일을 선택해주세요.');
      return;
    }

    // 할인 정보 수집
    const selectedDiscounts = [];
    document.querySelectorAll('.discount-checkbox:checked').forEach(checkbox => {
      selectedDiscounts.push(checkbox.getAttribute('data-discount'));
    });

    const totalPrice = enrollments.reduce((sum, e) => sum + e.price, 0);
    let totalDiscount = 0;
    selectedDiscounts.forEach(discountKey => {
      totalDiscount += DISCOUNTS[discountKey];
    });
    const finalPrice = Math.max(0, totalPrice - totalDiscount);

    // 서버에 전송
    const paymentData = {
      user_id: currentUserId,
      enrollments: enrollments,
      payment_date: paymentDate,
      discounts: selectedDiscounts,
      total_price: totalPrice,
      discount_amount: totalDiscount,
      final_price: finalPrice
    };

    // 연장 모드일 경우 enrollment_id 추가
    if (window.extendingEnrollmentId) {
      paymentData.extending_enrollment_id = window.extendingEnrollmentId;
    }

    fetch('/admin/process_payment', {
      method: 'POST',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(paymentData)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('결제가 완료되었습니다!');

        // 연장 모드 플래그 초기화
        window.extendingEnrollmentId = null;
        window.extendingUserId = null;

        closePaymentModal();
        window.loadPaymentsTab(); // 목록 새로고침
      } else {
        alert('결제 처리 실패: ' + (data.error || '알 수 없는 오류'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('결제 처리 중 오류가 발생했습니다.');
    });
  };

  // 결제 이력 보기
  window.showPaymentHistory = function(userId) {
    fetch(`/admin/payment_history/${userId}`)
      .then(response => response.json())
      .then(data => {
        document.getElementById('payment-history-user-name').textContent = data.user_name + ' - 결제 정보';

        const listDiv = document.getElementById('payment-history-list');
        let html = '';

        // 활성 과목 섹션
        if (data.enrollments && data.enrollments.length > 0) {
          html += '<div style="margin-bottom: 30px;">';
          html += '<h4 style="font-size: 1rem; font-weight: 700; color: #2d3748; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid #667eea;">📚 활성 과목</h4>';

          data.enrollments.forEach(enrollment => {
            const statusBadge = enrollment.status === 'on_leave'
              ? '<span style="display: inline-block; padding: 4px 8px; background: #fef3c7; color: #f59e0b; border-radius: 8px; font-size: 0.75rem; font-weight: 600;">휴원</span>'
              : '<span style="display: inline-block; padding: 4px 8px; background: #d1fae5; color: #10b981; border-radius: 8px; font-size: 0.75rem; font-weight: 600;">활성</span>';

            html += '<div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin-bottom: 12px; border-left: 4px solid #667eea;">';
            html += '<div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 10px;">';
            html += '<div style="font-weight: 700; font-size: 1rem; color: #2d3748;">' + enrollment.subject + ' (' + enrollment.teacher + ') ' + statusBadge + '</div>';
            html += '</div>';
            html += '<div style="font-size: 0.85rem; color: #6b7280; margin-bottom: 5px;">📅 ' + enrollment.day + ' ' + enrollment.time_slot + '</div>';
            html += '<div style="font-size: 0.85rem; color: #6b7280; margin-bottom: 5px;">📖 남은 수업: ' + enrollment.remaining_lessons + '회</div>';
            if (enrollment.next_payment_date) {
              html += '<div style="font-size: 0.85rem; color: #6b7280; margin-bottom: 10px;">💳 다음 결제일: ' + enrollment.next_payment_date + '</div>';
            }
            html += '<button onclick="extendEnrollment(' + enrollment.id + ', ' + userId + ')" style="padding: 8px 16px; background: #10b981; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer; font-size: 0.85rem; transition: all 0.2s;">연장하기</button>';
            html += '</div>';
          });
          html += '</div>';
        }

        // 결제 이력 섹션
        html += '<div>';
        html += '<h4 style="font-size: 1rem; font-weight: 700; color: #2d3748; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 2px solid #667eea;">📋 결제 이력</h4>';

        if (data.payments.length === 0) {
          html += '<div class="payment-history-empty">결제 이력이 없습니다.</div>';
        } else {
          data.payments.forEach(payment => {
            html += '<div class="payment-history-item">';
            html += '<div class="payment-history-date">' + payment.payment_date + '</div>';
            html += '<div class="payment-history-details">';
            html += '<div class="payment-history-detail-row"><span class="payment-history-label">과목</span><span>' + payment.subject + '</span></div>';
            html += '<div class="payment-history-detail-row"><span class="payment-history-label">선생님</span><span>' + payment.teacher + '</span></div>';
            html += '<div class="payment-history-detail-row"><span class="payment-history-label">기간</span><span>' + payment.months + '개월 (' + payment.lessons + '회)</span></div>';
            if (payment.first_lesson_date && payment.first_lesson_time) {
              html += '<div class="payment-history-detail-row"><span class="payment-history-label">첫수업</span><span>' + payment.first_lesson_date + ' ' + payment.first_lesson_time + '</span></div>';
            }
            html += '<div class="payment-history-detail-row"><span class="payment-history-label">금액</span><span>' + payment.amount.toLocaleString() + '원</span></div>';
            if (payment.discount_amount > 0) {
              html += '<div class="payment-history-detail-row"><span class="payment-history-label">할인</span><span style="color: #ef4444;">-' + payment.discount_amount.toLocaleString() + '원</span></div>';
            }
            html += '</div></div>';
          });
        }
        html += '</div>';

        listDiv.innerHTML = html;
        document.getElementById('payment-history-modal').style.display = 'flex';
      })
      .catch(error => {
        console.error('Error:', error);
        alert('결제 정보를 불러오는데 실패했습니다.');
      });
  };

  // 결제 이력 모달 닫기
  window.closePaymentHistoryModal = function(event) {
    if (!event || event.target.id === 'payment-history-modal') {
      document.getElementById('payment-history-modal').style.display = 'none';
    }
  };

  // 과목 연장하기 (기존 enrollment 연장)
  window.extendEnrollment = function(enrollmentId, userId) {
    // 다른 모달들 닫기
    closePaymentHistoryModal();
    closePaymentDateModal();

    // enrollment 정보 가져오기
    fetch(`/admin/enrollment_info/${enrollmentId}`)
      .then(response => response.json())
      .then(enrollment => {
        // 결제 모달 열기 (연장 모드로)
        currentUserId = userId;
        enrollments = [];

        document.getElementById('payment-modal').style.display = 'flex';
        document.getElementById('payment-modal-user-name').textContent = enrollment.subject + ' 연장하기';

        // 연장 모드 플래그 설정
        window.extendingEnrollmentId = enrollmentId;
        window.extendingUserId = userId;

        // 기간/횟수 선택 UI를 직접 표시
        const enrollmentListDiv = document.getElementById('enrollment-list');
        enrollmentListDiv.innerHTML = `
          <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h4 style="font-size: 1rem; font-weight: 700; color: #2d3748; margin-bottom: 15px;">📚 연장 정보</h4>
            <div style="margin-bottom: 10px; color: #6b7280;">과목: ${enrollment.subject}</div>
            <div style="margin-bottom: 10px; color: #6b7280;">선생님: ${enrollment.teacher}</div>
            <div style="margin-bottom: 10px; color: #6b7280;">시간: ${enrollment.day} ${enrollment.time_slot}</div>
            <div style="margin-bottom: 20px; color: #6b7280;">현재 남은 수업: ${enrollment.remaining_lessons}회</div>

            <h4 style="font-size: 0.95rem; font-weight: 700; color: #2d3748; margin-bottom: 10px;">연장 기간 선택</h4>
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 10px;">
              <button onclick="selectExtensionDuration(1, 4, ${enrollment.subject}, ${enrollment.teacher})" style="padding: 15px; background: white; border: 2px solid #e5e7eb; border-radius: 8px; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.borderColor='#667eea'" onmouseout="this.style.borderColor='#e5e7eb'">
                <div style="font-weight: 700; font-size: 1.1rem; color: #2d3748;">1개월</div>
                <div style="font-size: 0.85rem; color: #6b7280;">4회 수업</div>
              </button>
              <button onclick="selectExtensionDuration(3, 12, '${enrollment.subject}', '${enrollment.teacher}')" style="padding: 15px; background: white; border: 2px solid #e5e7eb; border-radius: 8px; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.borderColor='#667eea'" onmouseout="this.style.borderColor='#e5e7eb'">
                <div style="font-weight: 700; font-size: 1.1rem; color: #2d3748;">3개월</div>
                <div style="font-size: 0.85rem; color: #6b7280;">12회 수업</div>
              </button>
            </div>
          </div>
        `;

        // 결제 섹션 표시
        updatePaymentSection();
      })
      .catch(error => {
        console.error('Error:', error);
        alert('과목 정보를 불러오는데 실패했습니다.');
      });
  };

  // 연장 기간 선택
  window.selectExtensionDuration = function(months, lessons, subject, teacher) {
    const price = months === 1 ? 200000 : 600000;

    enrollments = [{
      subject: subject,
      teacher: teacher,
      months: months,
      lessons: lessons,
      price: price,
      day_of_week: null, // 연장 시에는 불필요
      time_slot: null,
      first_lesson_date: null,
      end_date: null
    }];

    updateEnrollmentList();
    updatePaymentSection();
  };

  // 과목별 휴원 관리 모달 열기
  window.openEnrollmentModal = function(userId) {
    const enrollmentData = document.getElementById('enrollment-data-' + userId);
    if (!enrollmentData) return;

    const items = enrollmentData.querySelectorAll('.enrollment-item');
    let html = '';

    items.forEach(item => {
      const id = item.getAttribute('data-id');
      const subject = item.getAttribute('data-subject');
      const teacher = item.getAttribute('data-teacher');
      const day = item.getAttribute('data-day');
      const time = item.getAttribute('data-time');
      const status = item.getAttribute('data-status');

      html += '<div style="background: #f8fafc; padding: 15px; border-radius: 8px; margin-bottom: 10px; border: 1px solid #e2e8f0;">';
      html += '<div style="font-weight: 600; margin-bottom: 8px;">' + subject + ' - ' + teacher + '</div>';
      html += '<div style="font-size: 0.85rem; color: #6b7280; margin-bottom: 10px;">' + day + ' ' + time + '</div>';
      html += '<button onclick="toggleEnrollmentStatus(' + id + ', \'' + status + '\', \'' + teacher + '\')" style="padding: 8px 16px; background: ' + (status === 'on_leave' ? '#f59e0b' : '#10b981') + '; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">';
      html += (status === 'on_leave' ? '휴원 해제' : '휴원 처리') + '</button>';
      html += '</div>';
    });

    document.getElementById('enrollment-manage-list').innerHTML = html;
    document.getElementById('enrollment-manage-modal').style.display = 'flex';
  };

  // 과목별 휴원 관리 모달 닫기
  window.closeEnrollmentManageModal = function(event) {
    if (!event || event.target.id === 'enrollment-manage-modal') {
      document.getElementById('enrollment-manage-modal').style.display = 'none';
    }
  };

  // 과목별 휴원 상태 토글
  window.toggleEnrollmentStatus = function(enrollmentId, currentStatus, teacher) {
    const newStatus = currentStatus === 'on_leave' ? 'active' : 'on_leave';

    // 휴원 해제 시 시간표 선택 모달 표시
    if (currentStatus === 'on_leave') {
      window.showScheduleSelectModal(enrollmentId, teacher);
    } else {
      // 휴원 처리 (그냥 상태만 변경)
      fetch(`/admin/user_enrollments/${enrollmentId}/toggle_status`, {
        method: 'PATCH',
        headers: {
          'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          alert('휴원 처리되었습니다.');
          closeEnrollmentManageModal();
          window.loadPaymentsTab();
        } else {
          alert('상태 변경 실패: ' + (data.error || '알 수 없는 오류'));
        }
      })
      .catch(error => {
        console.error('Error:', error);
        alert('상태 변경 중 오류가 발생했습니다.');
      });
    }
  };

  // 시간표 선택 모달 표시 (휴원 해제용)
  window.showScheduleSelectModal = function(enrollmentId, teacher) {
    window.currentEnrollmentId = enrollmentId;

    window.scheduleModalData = {
      currentTeacher: teacher,
      teachers: <%= raw @teachers.to_json %>,
      teacherHolidays: <%= raw @teacher_holidays.to_json %>,
      selectedDate: null,
      selectedWeekOffset: 0,
      availabilityData: {},
      scheduleData: {}
    };

    // 선생님 탭 렌더링
    renderTeacherTabs();

    // 캘린더 렌더링 (현재 주)
    loadScheduleAndRenderCalendar(0);

    document.getElementById('schedule-select-modal').style.display = 'flex';
  };

  // 선생님 탭 렌더링
  function renderTeacherTabs() {
    const tabsContainer = document.getElementById('teacher-tabs');
    const teachers = window.scheduleModalData.teachers;
    const currentTeacher = window.scheduleModalData.currentTeacher;

    let html = '';
    teachers.forEach(teacher => {
      const isActive = teacher === currentTeacher;
      const style = isActive
        ? 'padding: 12px 24px; background: #667eea; color: white; border: none; border-bottom: 3px solid #667eea; cursor: pointer; font-weight: 600; font-size: 0.95rem;'
        : 'padding: 12px 24px; background: transparent; color: #6b7280; border: none; border-bottom: 3px solid transparent; cursor: pointer; font-weight: 500; font-size: 0.95rem;';

      html += `<button onclick="switchTeacher('${teacher}')" style="${style}">${teacher}</button>`;
    });

    tabsContainer.innerHTML = html;
  }

  // 선생님 전환
  window.switchTeacher = function(teacher) {
    window.scheduleModalData.currentTeacher = teacher;
    window.scheduleModalData.selectedDate = null;

    renderTeacherTabs();
    document.getElementById('selected-date-info').style.display = 'none';
    document.getElementById('schedule-select-content').innerHTML = '<p style="text-align: center; color: #9ca3af;">날짜를 선택해주세요.</p>';

    // 현재 주의 시간표 다시 불러오기
    loadScheduleAndRenderCalendar(window.scheduleModalData.selectedWeekOffset);
  };

  // 시간표 불러오고 캘린더 렌더링
  function loadScheduleAndRenderCalendar(weekOffset) {
    const teacher = window.scheduleModalData.currentTeacher;

    fetch(`/admin/load_schedule?teacher=${encodeURIComponent(teacher)}&week_offset=${weekOffset}&mode=manager`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.scheduleModalData.scheduleData = data.schedules;
          window.scheduleModalData.selectedWeekOffset = weekOffset;
          renderScheduleCalendar(data.week_start, data.week_end);
        } else {
          alert('시간표를 불러오는데 실패했습니다.');
        }
      })
      .catch(error => {
        console.log('Error:', error);
        alert('시간표를 불러오는데 실패했습니다.');
      });
  }

  // 캘린더 렌더링 (주 단위)
  function renderScheduleCalendar(weekStart, weekEnd) {
    const startDate = new Date(weekStart + 'T00:00:00');
    const endDate = new Date(weekEnd + 'T00:00:00');

    const year = startDate.getFullYear();
    const month = startDate.getMonth() + 1;

    document.getElementById('schedule-calendar-month').textContent = `${year}년 ${month}월 (${weekStart} ~ ${weekEnd})`;

    const scheduleData = window.scheduleModalData.scheduleData;
    const teacherHolidays = window.scheduleModalData.teacherHolidays[window.scheduleModalData.currentTeacher] || [];
    const dayKeys = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];
    const timeSlots = ['13-14', '14-15', '15-16', '16-17', '17-18', '19-20', '20-21', '21-22'];

    let html = '<table style="width: 100%; border-collapse: collapse;">';
    html += '<thead><tr>';
    ['일', '월', '화', '수', '목', '금', '토'].forEach(day => {
      html += `<th style="padding: 8px; text-align: center; font-weight: 600; color: #6b7280;">${day}</th>`;
    });
    html += '</tr></thead><tbody><tr>';

    // 7일간의 날짜 렌더링
    for (let i = 0; i < 7; i++) {
      const currentDate = new Date(startDate);
      currentDate.setDate(startDate.getDate() + i);

      const dateStr = currentDate.getFullYear() + '-' +
                      String(currentDate.getMonth() + 1).padStart(2, '0') + '-' +
                      String(currentDate.getDate()).padStart(2, '0');

      const dayOfWeek = currentDate.getDay();
      const dayKey = dayKeys[dayOfWeek];
      const isHoliday = teacherHolidays.includes(dayOfWeek);

      let isFull = false;
      if (!isHoliday && scheduleData[dayKey]) {
        isFull = true;
        for (const timeSlot of timeSlots) {
          const students = scheduleData[dayKey][timeSlot] || [];
          if (students.length < 3) {
            isFull = false;
            break;
          }
        }
      }

      let style = 'padding: 20px; text-align: center; cursor: pointer; border: 1px solid #e5e7eb; vertical-align: top;';
      let bgColor = 'white';

      if (isHoliday) {
        bgColor = '#fef3c7'; // 연노랑 (휴무일)
        style += ' cursor: not-allowed;';
      } else if (isFull) {
        bgColor = '#fee2e2'; // 연붉은색 (꽉 참)
        style += ' cursor: not-allowed;';
      } else {
        bgColor = 'white';
      }

      style += ` background: ${bgColor};`;

      const onclick = (isHoliday || isFull) ? '' : `onclick="selectScheduleDate('${dateStr}')"`;
      const onmouseover = (isHoliday || isFull) ? '' : `onmouseover="this.style.background='#dbeafe'"`;
      const onmouseout = (isHoliday || isFull) ? '' : `onmouseout="this.style.background='${bgColor}'"`;

      html += `<td style="${style}" ${onclick} ${onmouseover} ${onmouseout}>`;
      html += `<div style="font-size: 1.2rem; font-weight: 600; margin-bottom: 5px;">${currentDate.getDate()}</div>`;

      if (isHoliday) {
        html += '<div style="font-size: 0.8rem; color: #f59e0b;">휴무</div>';
      } else if (isFull) {
        html += '<div style="font-size: 0.8rem; color: #dc2626;">예약 불가</div>';
      }

      html += '</td>';
    }

    html += '</tr></tbody></table>';
    document.getElementById('schedule-calendar-content').innerHTML = html;
  }

  // 주 변경
  window.changeScheduleMonth = function(delta) {
    const newWeekOffset = window.scheduleModalData.selectedWeekOffset + delta;
    loadScheduleAndRenderCalendar(newWeekOffset);
  };

  // 날짜 선택
  window.selectScheduleDate = function(dateStr) {
    window.scheduleModalData.selectedDate = dateStr;

    const date = new Date(dateStr + 'T00:00:00');
    const dayOfWeek = date.getDay();
    const dayNames = ['일', '월', '화', '수', '목', '금', '토'];
    const dayKeys = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];

    const selectedDay = dayKeys[dayOfWeek];

    // 선택된 날짜 정보 표시
    const infoDiv = document.getElementById('selected-date-info');
    infoDiv.style.display = 'block';
    infoDiv.querySelector('p').textContent = `선택된 날짜: ${dateStr} (${dayNames[dayOfWeek]})`;

    // 해당 요일의 시간표 표시
    const scheduleData = window.scheduleModalData.scheduleData;
    const teacherHolidays = window.scheduleModalData.teacherHolidays[window.scheduleModalData.currentTeacher] || [];
    const isHoliday = teacherHolidays.includes(dayOfWeek);

    renderScheduleForDay(selectedDay, scheduleData[selectedDay] || {}, isHoliday);
  };

  // 특정 요일의 시간표 렌더링
  function renderScheduleForDay(day, daySchedule, isHoliday) {
    const modalContent = document.getElementById('schedule-select-content');
    const timeSlots = ['13-14', '14-15', '15-16', '16-17', '17-18', '19-20', '20-21', '21-22'];

    let html = '<div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 12px;">';

    timeSlots.forEach(timeSlot => {
      const students = daySchedule[timeSlot] || [];
      const currentCount = students.length;
      const isFull = currentCount >= 3;

      let cardStyle = 'padding: 20px; border-radius: 8px; text-align: center; border: 2px solid; transition: all 0.2s;';
      let onclick = '';

      if (isHoliday) {
        cardStyle += ' background: #fef3c7; color: #f59e0b; border-color: #fbbf24; cursor: not-allowed;';
      } else if (isFull) {
        cardStyle += ' background: #fee2e2; color: #dc2626; border-color: #fecaca; cursor: not-allowed;';
      } else {
        cardStyle += ' background: #dbeafe; color: #1e40af; border-color: #93c5fd; cursor: pointer;';
        onclick = `onclick="selectScheduleSlot('${day}', '${timeSlot}')"`;
      }

      html += `<div style="${cardStyle}" ${onclick}>`;
      html += `<div style="font-size: 1.1rem; font-weight: 600; margin-bottom: 8px;">${timeSlot.replace('-', ':00-')}:00</div>`;

      if (isHoliday) {
        html += '<div style="font-size: 0.9rem;">휴무</div>';
      } else {
        html += `<div style="font-size: 0.9rem;">${currentCount}/3</div>`;
        if (!isFull) {
          html += '<div style="font-size: 0.8rem; margin-top: 4px; color: #10b981;">선택 가능</div>';
        } else {
          html += '<div style="font-size: 0.8rem; margin-top: 4px;">자리 없음</div>';
        }
      }

      html += '</div>';
    });

    html += '</div>';
    modalContent.innerHTML = html;
  }

  // 시간대 선택
  window.selectScheduleSlot = function(day, timeSlot) {
    const modalData = window.scheduleModalData;
    const selectedDate = modalData.selectedDate;
    const selectedTeacher = modalData.currentTeacher;

    if (!selectedDate) {
      alert('날짜를 먼저 선택해주세요.');
      return;
    }

    const dayNames = { sun: '일', mon: '월', tue: '화', wed: '수', thu: '목', fri: '금', sat: '토' };
    const confirmMessage = `${selectedTeacher} 선생님\n${selectedDate} (${dayNames[day]})\n${timeSlot.replace('-', ':00-')}:00\n\n위 시간대로 복귀하시겠습니까?`;

    if (!confirm(confirmMessage)) return;

    fetch(`/admin/user_enrollments/${window.currentEnrollmentId}/toggle_status`, {
      method: 'PATCH',
      headers: {
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        status: 'active',
        day: day,
        time_slot: timeSlot,
        teacher: selectedTeacher,
        first_lesson_date: selectedDate
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('복귀 처리되었습니다.');
        document.getElementById('schedule-select-modal').style.display = 'none';
        closeEnrollmentManageModal();
        window.loadPaymentsTab();
      } else {
        alert('복귀 처리 실패: ' + (data.error || '알 수 없는 오류'));
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('복귀 처리 중 오류가 발생했습니다.');
    });
  };

  window.closeScheduleSelectModal = function() {
    document.getElementById('schedule-select-modal').style.display = 'none';
  };

  // ============== 결제 캘린더 ==============
  let paymentCalendarData = <%= raw @payment_calendar_data.to_json %>;
  let currentCalendarMonth = new Date();

  // 즉시 캘린더 렌더링 (AJAX로 로드되므로 DOMContentLoaded 사용 안 함)
  renderPaymentCalendar();

  // 캘린더 렌더링
  function renderPaymentCalendar() {
    const year = currentCalendarMonth.getFullYear();
    const month = currentCalendarMonth.getMonth();

    document.getElementById('calendar-month-title').textContent = `${year}년 ${month + 1}월`;

    const firstDay = new Date(year, month, 1).getDay();
    const lastDate = new Date(year, month + 1, 0).getDate();
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    let html = '<table style="width: 100%; border-collapse: collapse; table-layout: fixed;">';
    html += '<thead><tr>';
    ['일', '월', '화', '수', '목', '금', '토'].forEach((day, idx) => {
      const color = idx === 0 ? '#dc2626' : idx === 6 ? '#2563eb' : '#6b7280';
      html += `<th style="width: 14.28%; padding: 12px; text-align: center; font-weight: 600; color: ${color}; font-size: 0.9rem;">${day}</th>`;
    });
    html += '</tr></thead><tbody><tr>';

    // 빈 칸
    for (let i = 0; i < firstDay; i++) {
      html += '<td style="padding: 15px; border: 1px solid #e5e7eb; background: #f9fafb;"></td>';
    }

    // 날짜 렌더링
    for (let date = 1; date <= lastDate; date++) {
      const currentDate = new Date(year, month, date);
      currentDate.setHours(0, 0, 0, 0);
      const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(date).padStart(2, '0')}`;

      const payments = paymentCalendarData[dateStr] || [];
      const count = payments.length;

      const isToday = currentDate.getTime() === today.getTime();
      const isPast = currentDate < today;

      let bgColor = 'white';
      let borderColor = '#e5e7eb';
      let cursor = 'default';

      if (isToday) {
        bgColor = '#fef3c7';
        borderColor = '#f59e0b';
      } else if (isPast) {
        bgColor = '#f3f4f6';
      } else if (count > 0) {
        bgColor = '#dbeafe';
        borderColor = '#3b82f6';
        cursor = 'pointer';
      }

      const onclick = count > 0 ? `onclick="showPaymentDateDetail('${dateStr}')"` : '';
      const style = `height: 100px; padding: 15px; border: 2px solid ${borderColor}; background: ${bgColor}; vertical-align: top; cursor: ${cursor}; transition: all 0.2s;`;
      const hover = count > 0 ? `onmouseover="this.style.background='#bfdbfe'" onmouseout="this.style.background='${bgColor}'"` : '';

      html += `<td style="${style}" ${onclick} ${hover}>`;
      html += `<div style="font-size: 1rem; font-weight: 600; margin-bottom: 5px; color: ${isToday ? '#d97706' : '#2d3748'};">${date}</div>`;

      if (count > 0) {
        html += `<div style="display: inline-block; padding: 4px 8px; background: ${isToday ? '#f59e0b' : '#3b82f6'}; color: white; border-radius: 12px; font-size: 0.75rem; font-weight: 700;">${count}명</div>`;
      }

      html += '</td>';

      if ((firstDay + date) % 7 === 0 && date !== lastDate) {
        html += '</tr><tr>';
      }
    }

    // 마지막 빈 칸
    const lastDayOfWeek = (firstDay + lastDate) % 7;
    if (lastDayOfWeek !== 0) {
      for (let i = lastDayOfWeek; i < 7; i++) {
        html += '<td style="padding: 15px; border: 1px solid #e5e7eb; background: #f9fafb;"></td>';
      }
    }

    html += '</tr></tbody></table>';
    document.getElementById('payment-calendar-content').innerHTML = html;

    // 오늘 결제 예정자 표시
    const todayStr = today.toISOString().split('T')[0];
    const todayPayments = paymentCalendarData[todayStr] || [];

    if (todayPayments.length > 0) {
      document.getElementById('today-payments-summary').style.display = 'block';
      let summaryHtml = `<strong>${todayPayments.length}명</strong>의 회원이 오늘 결제 예정입니다:<br>`;
      todayPayments.forEach(p => {
        summaryHtml += `• ${p.user_name} (${p.subject} - ${p.teacher})<br>`;
      });
      document.getElementById('today-payments-list').innerHTML = summaryHtml;
    } else {
      document.getElementById('today-payments-summary').style.display = 'none';
    }
  }

  // 월 변경
  window.changeCalendarMonth = function(delta) {
    currentCalendarMonth.setMonth(currentCalendarMonth.getMonth() + delta);
    renderPaymentCalendar();
  };

  // 날짜별 결제 예정자 상세 보기
  window.showPaymentDateDetail = function(dateStr) {
    const payments = paymentCalendarData[dateStr] || [];
    if (payments.length === 0) return;

    const date = new Date(dateStr + 'T00:00:00');
    const formattedDate = `${date.getFullYear()}년 ${date.getMonth() + 1}월 ${date.getDate()}일`;

    document.getElementById('payment-date-modal-title').textContent = `${formattedDate} 결제 예정자`;

    let html = '';
    payments.forEach(payment => {
      html += '<div style="background: #f8fafc; padding: 15px; border-radius: 8px; border-left: 4px solid #667eea;">';
      html += `<div style="font-weight: 700; font-size: 1rem; color: #2d3748; margin-bottom: 8px;">${payment.user_name}</div>`;
      html += `<div style="font-size: 0.9rem; color: #6b7280; margin-bottom: 5px;">과목: ${payment.subject}</div>`;
      html += `<div style="font-size: 0.9rem; color: #6b7280; margin-bottom: 10px;">선생님: ${payment.teacher}</div>`;
      html += `<button onclick="extendEnrollment(${payment.enrollment_id}, ${payment.user_id})" style="padding: 8px 16px; background: #10b981; color: white; border: none; border-radius: 6px; font-weight: 600; cursor: pointer;">연장하기</button>`;
      html += '</div>';
    });

    document.getElementById('payment-date-list').innerHTML = html;
    document.getElementById('payment-date-modal').style.display = 'flex';
  };

  // 결제 날짜 모달 닫기
  window.closePaymentDateModal = function(event) {
    if (!event || event.target.id === 'payment-date-modal') {
      document.getElementById('payment-date-modal').style.display = 'none';
    }
  };

  console.log('결제관리 JavaScript 로드 완료');
})();
</script>
